#pragma once
#include "nwn_api.hpp"

#include "CExoArrayList.hpp"
#include "CExoString.hpp"
#include "CNWActionNode.hpp"
#include "CNWSCreatureAppearanceInfo.hpp"
#include "CNWSInvitationDetails.hpp"
#include "CNWSObject.hpp"
#include "CNWSPVPEntry.hpp"
#include "CNWSPersonalReputation.hpp"
#include "CResRef.hpp"
#include "Vector.hpp"


#ifdef NWN_API_PROLOGUE
NWN_API_PROLOGUE(CNWSCreature)
#endif

struct CEffectIconObject;
struct CGameEffect;
struct CGameEffect;
struct CItemRepository;
struct CNWCCMessageData;
struct CNWItemProperty;
struct CNWSArea;
struct CNWSBarter;
struct CNWSCombatAttackData;
struct CNWSCombatRound;
struct CNWSCreRestorePolymorphData;
struct CNWSCreatureStats;
struct CNWSFaction;
struct CNWSForcedAction;
struct CNWSInventory;
struct CNWSItem;
struct CNWSJournal;
struct CNWSObjectActionNode;
struct CNWSPlayer;
struct CNWSQuickbarButton;
struct CNWVisibilityNode;
struct CNWVisibilityNode;
struct CPathfindInformation;
struct CResGFF;
struct CResStruct;


typedef int BOOL;
typedef uint32_t OBJECT_ID;
typedef uint32_t STRREF;


struct CNWSCreature : CNWSObject
{
    BOOL m_bPonyRide;
    uint16_t m_nEquipArrayIndex;
    OBJECT_ID m_poidCntrSpellObjects[10];
    int32_t m_nNumCntrSpellObjects;
    CExoString m_sScripts[13];
    CExoString m_sOriginalScripts[13];
    CNWSQuickbarButton * m_pQuickbarButton;
    BOOL m_bLootable;
    uint32_t m_nDecayTime;
    OBJECT_ID m_oidBodyBag;
    OBJECT_ID m_oidDesiredArea;
    Vector m_vDesiredAreaLocation;
    BOOL m_bDesiredAreaUpdateComplete;
    CExoArrayList<OBJECT_ID> m_aLinkedAreaOfEffectObjects;
    CExoArrayList<OBJECT_ID> m_aInSubAreas;
    OBJECT_ID m_oidBlockingDoor;
    CPathfindInformation * m_pcPathfindInformation;
    float m_fMovementScaleFactor;
    BOOL m_bUpdateCombatInformation;
    int32_t m_nNumCharSheetViewers;
    BOOL m_bUpdateSpellSlots;
    BOOL m_bOnCreationScriptExecuted;
    uint32_t m_nLastHeartbeatScriptCalendarDay;
    uint32_t m_nLastHeartbeatScriptTimeOfDay;
    uint32_t m_nHeartbeatInterval;
    uint32_t m_nLastRestRadiusCheckDay;
    uint32_t m_nLastRestRadiusCheckTimeOfDay;
    OBJECT_ID m_oidLastTrapDetected;
    uint32_t m_nLastTrapCheckCalendarDay;
    uint32_t m_nLastTrapCheckTimeOfDay;
    uint32_t m_nLastStealthCheckCalendarDay;
    uint32_t m_nLastStealthCheckTimeOfDay;
    uint32_t m_nExcitedStateTimer;
    uint32_t m_nLastVisibleCreaturesCheckCalendarDay;
    uint32_t m_nLastVisibleCreaturesCheckTimeOfDay;
    int32_t m_nChecksVisibleList;
    uint32_t m_nChecksHeartbeat;
    uint32_t m_nMoveSpeedTimer;
    BOOL m_bPendingRealization;
    uint8_t m_nPersonalReputationHeartbeatCount;
    int32_t m_nLastActionQueueUpdateDay;
    int32_t m_nLastActionQueueUpdateTimeOfDay;
    CNWActionNode m_pActionQueue[10];
    uint8_t m_nAmbientAnimationState;
    CExoString m_sModelType;
    CExoArrayList<OBJECT_ID> m_oidAutoMapAreaList;
    uint8_t * * m_nAutoMapTileData;
    BOOL m_bAutoMapAutoExplores;
    uint8_t m_nLastExploredTileX;
    uint8_t m_nLastExploredTileY;
    OBJECT_ID oidLastExploredArea;
    uint8_t m_nDetectMode;
    uint8_t m_nStealthMode;
    uint8_t m_nDefensiveCastingMode;
    uint8_t m_nCombatMode;
    uint8_t m_nDesiredCombatMode;
    OBJECT_ID m_oidCounterSpellTarget;
    uint8_t m_nInitiativeRoll;
    BOOL m_bInitiativeExpired;
    BOOL m_bCombatState;
    int32_t m_nCombatStateTimer;
    BOOL m_bPassiveAttackBehaviour;
    BOOL m_bHasArms;
    BOOL m_bHasLegs;
    BOOL m_bDisarmable;
    int32_t m_nCreatureSize;
    float m_fPreferredAttackDistance;
    float m_fWeaponScale;
    OBJECT_ID m_oidAttackTarget;
    OBJECT_ID m_oidAttemptedAttackTarget;
    Vector m_vLastAttackPosition;
    OBJECT_ID m_oidGoingToBeAttackedBy;
    OBJECT_ID m_oidAttemptedSpellTarget;
    OBJECT_ID m_oidSpellTarget;
    int32_t m_nLastAmmoWarning;
    int32_t m_nLastCombatRoundUpdate;
    int32_t m_nLastRunningAOOUpdate;
    BOOL m_bBroadcastedAOOTo;
    int32_t m_nLastRunningAOOTimeOut;
    BOOL m_bExternalCombatModeEnabled;
    BOOL m_bSilent;
    BOOL m_bHasted;
    BOOL m_bSlowed;
    BOOL m_bTaunt;
    BOOL m_bForcedWalk;
    uint8_t m_nVisionType;
    uint8_t m_nState;
    uint32_t m_nEffectSpellId;
    CExoArrayList<CEffectIconObject *> m_aEffectIcons;
    BOOL m_bCutsceneCameraMode;
    float m_fCutsceneCameraMoveFactor;
    BOOL m_bWasPlotCreature;
    BOOL m_bCutsceneGhost;
    OBJECT_ID m_oidLastPerception;
    BOOL m_bLastPerceptionHeard;
    BOOL m_bLastPerceptionSeen;
    BOOL m_bLastPerceptionInaudible;
    BOOL m_bLastPerceptionVanished;
    float m_fSpotCheckDistance;
    float m_fMaxSpotCheckDistance;
    float m_fListenCheckDistance;
    float m_fMaxListenCheckDistance;
    float m_fBlindsightDistance;
    uint8_t m_nLastHideRoll;
    uint8_t m_nLastMoveSilentlyRoll;
    uint8_t m_nLastSpotRoll;
    uint8_t m_nLastListenRoll;
    CExoArrayList<CNWVisibilityNode *> m_pVisibleCreaturesList;
    OBJECT_ID m_oidInvitedToPartyBy;
    BOOL m_bInvitedToParty;
    uint32_t m_nInvitedToPartyDay;
    uint32_t m_nInvitedToPartyTimeOfDay;
    CExoArrayList<CNWSInvitationDetails> * m_pInvitationsOffered;
    CExoArrayList<CNWSInvitationDetails> * m_pInvitationsIgnored;
    OBJECT_ID m_oidLockOnTargetObj;
    int32_t m_nLastCounterSpellID;
    uint8_t m_nLastCounterSpellClass;
    uint8_t m_nLastCounterMetaType;
    uint8_t m_nLastCounterDomainLevel;
    CExoArrayList<OBJECT_ID> m_poidSpellIdentified;
    OBJECT_ID m_oidLastSpellCastItem;
    BOOL m_bLastSpellUnReadied;
    BOOL m_bLastItemCastSpell;
    int32_t m_nLastItemCastSpellLevel;
    BOOL m_bItemCastSpellBroadcastAOO;
    OBJECT_ID m_oidSittingObject;
    BOOL m_bStealAnimationPlayed;
    BOOL m_bStealAttemptDetected;
    BOOL m_bHealAnimationPlayed;
    BOOL m_bTrapAnimationPlayed;
    BOOL m_bUnlockAnimationPlayed;
    BOOL m_bLockAnimationPlayed;
    BOOL m_bDropItemAnimationPlayed;
    BOOL m_bPickUpItemAnimationPlayed;
    BOOL m_bTauntAnimationPlayed;
    uint32_t m_nRestDurationPerHPGain;
    uint32_t m_nRestHPToRecover;
    uint32_t m_nRestDurationPerSpellLevelGain;
    uint32_t m_nRestSpellLevelToRecover;
    BOOL m_bFacingAndAnimationDone;
    BOOL m_bMagicalArrowsEquipped;
    BOOL m_bMagicalBoltsEquipped;
    BOOL m_bMagicalBulletsEquipped;
    uint32_t * m_pSkillTimer;
    CNWSCombatRound * m_pcCombatRound;
    CNWSJournal * m_pJournal;
    CNWSBarter * m_pBarterInfo;
    uint32_t m_nGold;
    BOOL m_bPlayerCharacter;
    uint16_t m_nSoundSet;
    int32_t m_nFootstepType;
    uint8_t m_nBodyBag;
    int32_t m_nInTransit;
    BOOL m_bPoisoned;
    BOOL m_bDiseased;
    BOOL m_bIsImmortal;
    BOOL m_bNoPermDeath;
    CExoString m_sDisplayName;
    int32_t m_nUpdateDisplayNameSeq;
    uint16_t m_nAIState;
    uint8_t m_nAIStateAction;
    uint32_t m_oidAIStateActee;
    uint8_t m_nAIStateOutput;
    uint32_t m_nActivities;
    uint32_t m_nActivitiesLocked;
    float m_fMovementRateFactor;
    float m_fDriveModeMoveFactor;
    uint8_t m_nWalkAnimation;
    BOOL m_bDriveMode;
    BOOL m_bJumpedRecently;
    OBJECT_ID m_oidMaster;
    CExoArrayList<OBJECT_ID> * m_pAssociateList;
    uint16_t m_nAssociateType;
    int32_t m_nLastAssociateCommand;
    BOOL m_bSummonedAnimalCompanion;
    BOOL m_bSummonedFamiliar;
    BOOL m_bMasterDroppedFromServer;
    uint32_t m_nMasterDroppedCalendarDay;
    uint32_t m_nMasterDroppedTimeOfDay;
    int32_t m_nOriginalFactionId;
    CExoArrayList<CNWSPersonalReputation> * m_pPersonalReputationList;
    CExoArrayList<int32_t> * m_pReputation;
    CExoArrayList<CNWSPVPEntry> * m_pPVPList;
    OBJECT_ID m_oidEncounter;
    BOOL m_bAlreadyRemovedFromEncounter;
    CNWSInventory * m_pInventory;
    CItemRepository * m_pcItemRepository;
    uint16_t m_nRepositoryArrayIndex;
    uint16_t m_nItemContainerArrayIndex;
    OBJECT_ID m_oidCurrentItemContainer;
    int32_t m_nEquippedWeight;
    BOOL m_bComputeWeightCarried;
    int32_t m_nEncumbranceState;
    BOOL m_bLastPickupFailed;
    int32_t m_nTotalWeightCarried;
    OBJECT_ID m_pPrePolymorphedItems[18];
    CResRef m_refPrePolymorphPortrait;
    uint16_t m_nPrePolymorphPortraitId;
    BOOL m_bIsPolymorphed;
    uint16_t m_nPrePolymorphAppearanceType;
    uint8_t m_nPrePolymorphSTR;
    uint8_t m_nPrePolymorphCON;
    uint8_t m_nPrePolymorphDEX;
    uint16_t m_nPrePolymorphRacialType;
    int16_t m_nPrePolymorphHP;
    int32_t m_nPolymorphSpellId1;
    int32_t m_nPolymorphSpellId2;
    int32_t m_nPolymorphSpellId3;
    uint64_t m_nPolymorphACBonusEffect;
    uint64_t m_nPolymorphHPBonusEffect;
    BOOL m_bHasPrePolymorphCreatureWeaponProficiency;
    BOOL m_bPolymorphing;
    BOOL m_bPolymorphLocked;
    CNWSCreatureAppearanceInfo m_cAppearance;
    CNWSCreatureStats * m_pStats;
    uint32_t m_nLastRestCalendarDay;
    uint32_t m_nLastRestTimeOfDay;

    CNWSCreature(OBJECT_ID oidId = 0x7f000000, BOOL bCharacterObject = false, BOOL bAddObjectToArray = true);
    ~CNWSCreature();
    void SetId(OBJECT_ID oidNew);
    float ComputeSpellRange(CExoString sTargetType, OBJECT_ID oidTarget);
    BOOL AddPathfindingWaitActionToFront(uint16_t nGroupId);
    BOOL AddMoveToPointActionToFront(uint16_t nGroupId, Vector vNewWalkPosition, OBJECT_ID oidNewWalkArea, OBJECT_ID oidObjectMovingTo = 0x7f000000, BOOL bRunToPoint = false, float fRange = 0.0f, float fTimeout = 0.0f, BOOL bClientMoving = false, int32_t nClientPathNumber = 0, int32_t nMoveToPosition = 0, int32_t nMoveMode = 0, BOOL bStraightLine = 0, BOOL bCheckedActionPoint = 0);
    BOOL AddMoveToPointAction(uint16_t nGroupId, Vector vNewWalkPosition, OBJECT_ID oidNewWalkArea, OBJECT_ID oidObjectMovingTo = 0x7f000000, BOOL bRunToPoint = false, float fRange = 0.0f, float fTimeout = 0.0f, BOOL bClientMoving = false, int32_t nClientPathNumber = 0, int32_t nMoveToPosition = 0, int32_t nMoveMode = 0, BOOL bStraightLine = 0, BOOL bCheckedActionPoint = 0);
    BOOL AddDriveAction(uint16_t nGroupId, const Vector & vPathStart, int32_t nBearing, int32_t nClientPathNumber, int32_t nDriveFlags, int32_t nNumWayPointsToGenerate);
    BOOL AddAnimalEmpathyAction(OBJECT_ID oidTarget);
    BOOL AddAttackActions(OBJECT_ID oidTarget, BOOL bPassive = false, BOOL bClearAllActions = true, BOOL bAddToFront = false);
    BOOL AddCastSpellActions(uint32_t nSpellId, int32_t nMultiClass, int32_t nDomainLevel, int32_t nMetaType, BOOL bSpontaneousCast, Vector vTargetLocation, OBJECT_ID oidTarget, BOOL bAreaTarget = false, BOOL bAddToFront = false, BOOL bFake = false, uint8_t nProjectilePathType = 0, BOOL bInstant = false, BOOL bAllowPolymorphedCast = false, int32_t nFeat = - 1, uint8_t nCasterLevel = 0xff);
    BOOL AddHealActions(OBJECT_ID oidTarget, OBJECT_ID oidItemUsed, int32_t nActivePropertyIndex = 0);
    BOOL AddSitActions(OBJECT_ID oidTarget);
    BOOL AddItemCastSpellActions(OBJECT_ID oidItemUsed, int32_t nActivePropertyIndex, int32_t nSubPropertyIndex, Vector vTargetLocation, OBJECT_ID oidTarget, BOOL bAreaTarget = false);
    BOOL AddTrapActions(OBJECT_ID oidTrap, uint8_t nAction, OBJECT_ID oidTargetObject, Vector vPosition, OBJECT_ID oidTargetArea);
    BOOL AddTauntActions(OBJECT_ID oidTarget);
    BOOL AddDoorActions(OBJECT_ID oidDoor, uint8_t nAction, BOOL bAddToFront = false);
    BOOL AddCounterSpellActions(OBJECT_ID oidTarget);
    BOOL AddAppearActions(int32_t nAnimation = 63);
    BOOL AddDisappearActions(BOOL bReturning = false, int32_t nAnimation = 62);
    BOOL AddDropItemActions(OBJECT_ID oidItem, Vector vDropLocation, BOOL bDropGold);
    BOOL AddPickUpItemActions(OBJECT_ID oidItem, OBJECT_ID oidTargetRepository, uint8_t x, uint8_t y);
    BOOL AddEquipItemActions(CNWSItem * pItem, uint32_t nInventorySlot, BOOL bAddToFront = false, BOOL bForceAddAction = false, OBJECT_ID oidFeedbackPlayer = 0x7f000000);
    BOOL RunEquip(OBJECT_ID oidItemToEquip, uint32_t nInventorySlot, OBJECT_ID oidFeedbackPlayer = 0x7f000000);
    BOOL AddUnequipActions(CNWSItem * pItem, OBJECT_ID oidTargetRepository, uint8_t x, uint8_t y, BOOL bAddToFront = false, BOOL bForceAddAction = false, OBJECT_ID oidFeedbackPlayer = 0x7f000000);
    BOOL RunUnequip(OBJECT_ID oidItemToUnequip, OBJECT_ID oidTargetRepository, uint8_t x, uint8_t y, BOOL bMergeIntoRepository = true, OBJECT_ID oidFeedbackPlayer = 0x7f000000);
    BOOL AddUseTalentOnObjectActions(int32_t nType, int32_t nId, OBJECT_ID oTarget, uint8_t nMultiClass, OBJECT_ID oidItem, int32_t nItemPropertyIndex, uint8_t nCasterLevel, uint8_t nMetaType);
    BOOL AddUseTalentAtLocationActions(int32_t nType, int32_t nId, Vector vTarget, uint8_t nMultiClass, OBJECT_ID oidItem, int32_t nItemPropertyIndex, uint8_t nCasterLevel, uint8_t nMetaType);
    uint8_t CanEquipItem(CNWSItem * pItem, uint32_t * pEquipToSlot, BOOL bEquipping = false, BOOL bLoading = false, BOOL bDisplayFeedback = true, CNWSPlayer * pFeedbackPlayer = nullptr);
    BOOL CanUseItem(CNWSItem * pItem, BOOL bIgnoreIdentifiedFlag = false);
    uint8_t CanUnEquipWeapon(CNWSItem * pItem);
    void ResetItemPossessor();
    BOOL AddRepositoryMoveActions(CNWSItem * pItem, OBJECT_ID oidTargetRepository, uint8_t x, uint8_t y);
    void StartGuiTimingBar(uint32_t nTimeToRun, uint8_t nGuiTimingEventID);
    void StopGuiTimingBar();
    BOOL AddPickPocketActions(OBJECT_ID oidTarget);
    void AddToArea(CNWSArea * pArea, float fX, float fY, float fZ, BOOL bForceAdd = false);
    void AIUpdate();
    void SpawnInHeartbeatPerception(BOOL bAIUpdateLoop);
    virtual CNWSCreature * AsNWSCreature();
    virtual void ResetUpdateTimes(uint32_t nCalendarDay, uint32_t nTimeOfDay);
    void EventHandler(uint32_t nEventId, OBJECT_ID nCallerObjectId, void * pScript, uint32_t nCalendarDay, uint32_t nTimeOfDay);
    uint32_t GetItemCount(BOOL bDroppableOnly = true);
    BOOL AcquireItem(CNWSItem * * pItem, OBJECT_ID oidPossessor = 0x7f000000, OBJECT_ID oidTargetRepository = 0x7f000000, uint8_t x = 0xff, uint8_t y = 0xff, BOOL bOriginatingFromScript = false, BOOL bDisplayFeedback = true);
    BOOL RemoveItem(CNWSItem * pItem, BOOL bMergeIntoRepository = true, BOOL bDisplayFeedback = true, BOOL bForceRemove = false, BOOL bSetPossessor = true);
    BOOL RemoveItemFromRepository(CNWSItem * pItem, BOOL bRemoveFromContainers = true);
    void RemoveFromArea(BOOL bReturning = false);
    BOOL LoadCreature(CResGFF * pRes, CResStruct * cCreatureStruct, BOOL bIsSaveGame = false, BOOL bIsAssociate = false, BOOL bPreserveItemIds = true, BOOL bCopyObject = false);
    BOOL SaveCreature(CResGFF * pRes, CResStruct * pStruct, BOOL bStoreAssociateList = true, BOOL bUseDesiredAreaInfo = false, BOOL bExportingChar = false, BOOL bSaveOIDs = true);
    BOOL LoadFromTemplate(CResRef cResRef, CExoString * pTag = nullptr);
    void ReadScriptsFromGff(CResGFF * pRes, CResStruct * pGffStructWithCreatureStats);
    void ReadItemsFromGff(CResGFF * pRes, CResStruct * pGffStructWithCreatureStats, BOOL bPreserveItemIDs = true, BOOL bRunScripts = true);
    int32_t CalculateSpellSaveDC(int32_t nSpellId);
    BOOL TestAIStateAsMode(int32_t nAIStateAction);
    void ComputeAIState();
    float GetMovementRateFactor();
    void SetMovementRateFactor(float fValue);
    float GetWalkRate();
    float GetRunRate();
    BOOL GetUseMonkAbilities();
    BOOL UseSkill(uint8_t nSkill, uint8_t nSubSkill, OBJECT_ID oidTarget, Vector vTargetPosition, OBJECT_ID oidArea, OBJECT_ID oidUsedItem = 0x7f000000, int32_t nActivePropertyIndex = 0);
    BOOL UseFeat(uint16_t nFeat, uint16_t nSubFeat, OBJECT_ID oidTarget, OBJECT_ID oidArea, Vector * pvTarget = nullptr);
    BOOL UseItem(OBJECT_ID oidItem, uint8_t nActivePropertyIndex, uint8_t nSubPropertyIndex, OBJECT_ID oidTarget, Vector vTargetPosition, OBJECT_ID oidArea);
    BOOL ToggleMode(uint8_t nMode);
    BOOL GetMode(uint8_t nMode);
    void SetMode(uint8_t nMode, BOOL bSet);
    void RestoreItemProperties();
    void RemoveSpellActionFromRound();
    void ProcessPendingCombatActions();
    BOOL GetFlatFooted();
    BOOL GetFlanked(CNWSCreature * pTestCreature);
    BOOL GetIsInMelee();
    BOOL GetAttackResultHit(CNWSCombatAttackData * pAttackData);
    void DoCombatStep(uint8_t nStepType, int32_t nAnimationTime, OBJECT_ID oidTargetObject);
    int16_t GetArmorClass();
    int16_t GetMaxHitPoints(BOOL bIncludeToughness = true);
    void DoDamage(int32_t nDamage);
    uint8_t CalculateDamagePower(CNWSObject * pTarget, BOOL bOffHand = false);
    uint16_t GetDamageFlags();
    float MaxAttackRange(OBJECT_ID oidTarget, BOOL bBaseValue = false, BOOL bPassiveRange = false);
    float DesiredAttackRange(OBJECT_ID oidTarget, BOOL bBaseValue = false);
    uint8_t GetDetectMode();
    void SetDetectMode(uint8_t nDetectMode);
    void SetStealthMode(uint8_t nHideMode);
    void SetDefensiveCastingMode(uint8_t nDefensiveCastingMode);
    void SetCombatMode(uint8_t nMode, BOOL bForceMode = false);
    BOOL GetSpellOrHealActionQueued();
    BOOL GetHasInvisbilityEffectApplied();
    void ComputeModifiedMovementRate();
    int32_t GetTotalEffectBonus(uint8_t nEffectBonusType, CNWSObject * pObject, BOOL bElementalDamage = false, BOOL bForceMax = false, uint8_t nSaveType = 0, uint8_t nSpecificType = 0, uint8_t nSkill = 0xff, uint8_t nAbilityScore = 0xff, BOOL bOffHand = false);
    CExoArrayList<CGameEffect *> GetFilteredEffectList(uint8_t nEffectListType);
    int32_t GetWeaponPower(CNWSObject * pObject, BOOL bOffHand);
    void SendFeedbackMessage(uint16_t nFeedbackID, CNWCCMessageData * pMessageData = nullptr, CNWSPlayer * pFeedbackPlayer = nullptr);
    void SendFeedbackString(CExoString sFeedbackMessage, CNWSPlayer * pFeedbackPlayer = nullptr);
    BOOL EquipItem(uint32_t nInventorySlot, CNWSItem * pItem, BOOL bApplyPropertyEffects = true, BOOL bLoadingItem = false);
    BOOL UnequipItem(CNWSItem * pItem, BOOL bUnequipWhilePolymorphed = false);
    void DestroyEquippedItems();
    void SetLockOrientationToObject(OBJECT_ID oidLockOnObj);
    BOOL LearnScroll(OBJECT_ID oidScrollToLearn);
    void ActionManager(uint32_t nActionTypeToAdd);
    void ActivityManager(uint32_t nActionTypePerforming);
    BOOL GetActivity(int32_t nActivity);
    void SetActivity(int32_t nActivity, BOOL bValue);
    void ClearActivities(int32_t nActivityTypesToRemove);
    uint8_t SavingThrowRoll(uint8_t nType, uint16_t nDifficultyClass, uint8_t nSaveType = 0, OBJECT_ID oidSaveVersus = 0x7f000000, BOOL bPrint = true, uint16_t nFeat = 0, BOOL bQueueFeedback = false);
    BOOL GetIsInUseRange(OBJECT_ID oidUse, float fAdditionalRange = 0.0f, BOOL bIgnoreTransparentDoors = false);
    BOOL GetUseRange(OBJECT_ID oidUse, Vector & vUsePoint, float & fMoveRange);
    virtual void SetAnimation(int32_t nAnimation);
    BOOL GetInvisible(CNWSObject * pVersus, BOOL bSendFeedback = false);
    BOOL GetBlind();
    void StoreCutsceneVars();
    void RestoreCutsceneVars();
    void RemoveCombatInvisibilityEffects();
    void SetInvitedToParty(BOOL bInvitedToParty);
    void SetCombatState(BOOL bState);
    void BroadcastCombatStateToParty();
    void BroadcastAttackDataToParty(CNWCCMessageData * pMessageData, CNWSCombatAttackData * pAttackData, CNWSCreature * pOpponent = nullptr);
    void BroadcastDamageDataToParty(CNWCCMessageData * pMessageData, CNWSCreature * pOpponent = nullptr);
    void BroadcastDeathDataToParty(CNWCCMessageData * pMessageData, CNWSCreature * pOpponent = nullptr);
    void BroadcastSkillData(CNWCCMessageData * pMessageData);
    void BroadcastSavingThrowData(CNWCCMessageData * pMessageData);
    void BroadcastAssociateCommand(int32_t nAssociateCommand);
    void SetBroadcastedAOOTo(BOOL bValue);
    virtual void BroadcastFloatyData(CNWCCMessageData * pMessageData);
    void DisplayFloatyDataToSelf(STRREF nStrRef);
    void BroadcastSpellCast(uint32_t nSpellID, uint8_t nMultiClass, uint16_t nFeat);
    int32_t GetNumCounterSpellingCreatures(uint32_t nSpellID);
    void ValidateCounterSpellData(uint32_t nSpellID, uint8_t nMultiClass, uint8_t nSpellLevel);
    void RemoveCounterspeller(OBJECT_ID oCreature);
    void BroadcastBattleCry();
    void BroadcastVoiceChat(uint8_t nVoiceChatID);
    void BroadcastAttackOfOpportunity(OBJECT_ID oidSingleTarget = 0x7f000000, BOOL bMovement = false);
    void RecomputeAmbientAnimationState();
    void AddAssociate(OBJECT_ID oidAssociate, uint16_t nAssociateType);
    void ReceiveAssociateCommand(int32_t nCommandId);
    void RelayQuickChatCommandToAssociates(uint16_t nSoundSetSoundID);
    void RemoveAssociate(OBJECT_ID oidAssociate);
    void RemoveAllAssociates();
    void UnsummonMyself();
    void SetPCDominatedScripts();
    void ResetPCDominatedScripts();
    void RemoveDomination();
    void ProcessMasterDeathForAssociates();
    void BringAssociatesToNewFaction(int32_t nFactionId);
    void SetAssociateListenPatterns();
    void SetAssociateType(uint16_t nAssociateType);
    OBJECT_ID GetAssociateId(uint16_t nAssociateType, int32_t nNth = 1);
    int32_t GetNumAssociatesOfType(uint16_t nAssociateType);
    void NotifyAssociateActionToggle(int32_t nMode);
    int32_t GetHenchmanIndex(OBJECT_ID oidAssociate);
    void SummonAnimalCompanion();
    void SummonFamiliar();
    void PossessFamiliar();
    void UnpossessFamiliar();
    void PossessCreature(OBJECT_ID target);
    void UnpossessCreature();
    void PossessCreatureDM(OBJECT_ID target, uint8_t possessType);
    void UnpossessCreatureDM();
    void DMClearScripts(BOOL override = false);
    void DMResetClearedScripts(BOOL override = false);
    BOOL GetIsAbleToPossessFamiliar();
    BOOL GetIsPossessedFamiliar();
    OBJECT_ID GetDominatedCreatureId();
    CNWSFaction * GetFaction();
    OBJECT_ID GetNearestEnemy(float fRange, OBJECT_ID oidToExclude = 0x7f000000, BOOL bVisible = true, BOOL bNoCreaturesOnLine = false);
    int32_t GetCreatureReputation(OBJECT_ID oidSource, int32_t nSourceFactionId, BOOL bUseOriginalFaction = false);
    int32_t GetStandardFactionReputation(int32_t nStandardFactionId);
    void SetStandardFactionReputation(int32_t nStandardFactionId, int32_t nNewReputation);
    void AdjustReputation(int32_t nFactionId, int32_t nAdjustment);
    void AddToPersonalReputationList(OBJECT_ID oidObject, int32_t nAdjustment, BOOL bValueDecays = true, float fDurationInSeconds = 180.0f);
    void ClearPersonalReputation(OBJECT_ID oidSource);
    int32_t CalculatePersonalReputationAdjustment(OBJECT_ID oidSource);
    void CleanOutPersonalReputationList();
    void LoadPersonalReputationList(CResGFF * pRes, CResStruct * pResStruct);
    void SavePersonalReputationList(CResGFF * pRes, CResStruct * pResStruct);
    void LoadAssociateList(CResGFF * pRes, CResStruct * pResStruct);
    void SaveAssociateList(CResGFF * pRes, CResStruct * pResStruct, BOOL bSaveOIDs);
    void RealizeAssociateList();
    BOOL ReplyToInvitation(int32_t nInvitationReply, OBJECT_ID oidInvitedBy);
    void CleanInvitationLists(BOOL bForcePurgeEntireList = false);
    void AddToInvitationsOffered(OBJECT_ID oidToAdd);
    BOOL GetIsInInvitationsOffered(OBJECT_ID oidInvitedPerson);
    void RemoveFromInvitationsOffered(OBJECT_ID oidToRemove);
    int32_t GetNumInvited();
    void AddToInvitationsIgnored(OBJECT_ID oidToAdd);
    BOOL GetIsInInvitationsIgnored(OBJECT_ID oidIgnoredPerson);
    void UpdateVisibleList();
    CNWVisibilityNode * GetVisibleListElement(OBJECT_ID oidCreature);
    void AddToVisibleList(OBJECT_ID oidCreature, BOOL bSeen, BOOL bHeard, uint8_t nSanctuary = 0, BOOL bInvisible = false);
    void RemoveFromVisibleList(OBJECT_ID oidCreature);
    void ClearVisibleList();
    void UpdateAutoMap(OBJECT_ID oidCreature);
    void MergeItem(CNWSItem * pItemToMergeInto, CNWSItem * pItemToMerge);
    void SplitItem(CNWSItem * pItemToSplit, int32_t nNumberToSplitOff);
    void UpdateEncumbranceState(BOOL bDisplayFeedback = true);
    BOOL UpdateSubareasOnJumpPosition(Vector vNewPosition, OBJECT_ID oidNewArea);
    BOOL UpdateSubareasOnMoveTo(Vector vOldPosition, Vector vNewPosition, BOOL bIntersectingSubAreas = false, CExoArrayList<OBJECT_ID> * aIntersectingSubAreas = nullptr, BOOL bDriveMode = false);
    BOOL HandleSubAreaStateChanges(CExoArrayList<OBJECT_ID> * aNewSubAreas, CExoArrayList<OBJECT_ID> * aIntersectingSubAreas, BOOL bDriveMode = false);
    void PostProcess();
    void ComputeArmourClass(CNWSItem * pItemToEquip, BOOL bEquipping = false, BOOL bLoadingItem = false);
    BOOL GetRangeWeaponEquipped();
    BOOL GetUnarmed();
    void SetExcitedState(uint8_t nAction);
    void UpdateExcitedStateTimer();
    void Rest(BOOL bRestingWithMaster = false, BOOL bEnemyToCreatureLineOfSightCheck = false);
    void CancelRest(uint16_t nCancelFeedbackMessage);
    BOOL ApplyDiseasePayload(CGameEffect * pEffect, uint32_t nCalendarDay, uint32_t nTimeOfDay);
    BOOL ApplyPoisonPayload(CGameEffect * pEffect, uint32_t nCalendarDay, uint32_t nTimeOfDay);
    BOOL ApplyWounding(CGameEffect * pEffect);
    BOOL RemoveCharmEffectsByOBJECTID(OBJECT_ID oidCharmer, int32_t nRepAdjToCharmer = 0);
    BOOL RemoveCharmEffectsByFactionID(int32_t nCharmerFactionID, int32_t nRepAdjToCharmer = 0);
    void RemoveSleepEffects();
    void RemoveBadEffects();
    void RemoveWoundingEffects();
    int32_t GetRelativeWeaponSize(CNWSItem * pItem);
    BOOL EvaluateLock(CNWSObject * pObject, BOOL bLockObject);
    void UpdateActionQueue();
    int32_t UpdateSpecialAttacks();
    void TerminateClientSidePath(int32_t nClientPathNumber);
    uint32_t AIActionMoveToPoint(CNWSObjectActionNode * pNode);
    uint32_t AIActionJumpToPoint(CNWSObjectActionNode * pNode);
    uint32_t AIActionJumpToObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionRandomWalk(CNWSObjectActionNode * pNode);
    uint32_t AIActionChangeFacingPoint(CNWSObjectActionNode * pNode);
    uint32_t AIActionChangeFacingObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckInterAreaPathfinding(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveAwayFromObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveAwayFromLocation(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveToObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveToObjectRadius(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveToPoint(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckMoveToPointRadius(CNWSObjectActionNode * pNode);
    uint32_t AIActionForceFollowObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionCheckForceFollowObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionDrive(CNWSObjectActionNode * pNode);
    uint32_t DriveUpdateLocation(BOOL bRun);
    BOOL ComputeDriveDestination(uint8_t nDriveFlags, const Vector & vStartPoint, const Vector & vStartOrient);
    uint32_t AIActionCastSpell(CNWSObjectActionNode * pNode);
    uint32_t AIActionItemCastSpell(CNWSObjectActionNode * pNode);
    uint32_t AIActionRepositoryMove(CNWSObjectActionNode * pNode);
    uint32_t AIActionEquipItem(CNWSObjectActionNode * pNode);
    uint32_t AIActionUnequipItem(CNWSObjectActionNode * pNode);
    uint32_t AIActionAttackObject(CNWSObjectActionNode * pNode);
    uint32_t AIActionEncounterCreatureDestroySelf();
    uint32_t AIActionAnimalEmpathy(CNWSObjectActionNode * pNode);
    uint32_t AIActionRest(CNWSObjectActionNode * pNode);
    uint32_t AIActionTaunt(CNWSObjectActionNode * pNode);
    uint32_t AIActionCounterSpell(CNWSObjectActionNode * pNode);
    uint32_t AIActionAppear(CNWSObjectActionNode * pNode);
    uint32_t AIActionDisappear(CNWSObjectActionNode * pNode);
    uint32_t AIActionPickPocket(CNWSObjectActionNode * pNode);
    uint32_t AIActionHeal(CNWSObjectActionNode * pNode);
    uint32_t AIActionSit(CNWSObjectActionNode * pNode);
    uint32_t AIActionWaitForEndOfRound(CNWSObjectActionNode * pNode);
    uint32_t AIActionOrientCamera(CNWSObjectActionNode * pNode);
    uint32_t AIActionPickUpItem(CNWSObjectActionNode * pNode);
    uint32_t AIActionDropItem(CNWSObjectActionNode * pNode);
    uint32_t AIActionFlagTrap(CNWSObjectActionNode * pNode);
    uint32_t AIActionDisarmTrap(CNWSObjectActionNode * pNode);
    uint32_t AIActionRecoverTrap(CNWSObjectActionNode * pNode);
    uint32_t AIActionExamineTrap(CNWSObjectActionNode * pNode);
    uint32_t AIActionSetTrap(CNWSObjectActionNode * pNode);
    uint32_t AIActionBarter(CNWSObjectActionNode * pNode);
    uint32_t AIActionExamine(CNWSObjectActionNode * pNode);
    uint32_t AIActionAreaWait(CNWSObjectActionNode * pNode);
    virtual CResRef GetPortrait();
    virtual void SetPortrait(CResRef cPortrait);
    virtual void SetPortraitId(uint16_t nPortraitId);
    void UpdateAppearanceForEquippedItems();
    void UpdatePersonalSpace();
    void UpdateAppearanceDependantInfo();
    CNWSJournal * GetJournal();
    CNWSBarter * GetBarterInfo(BOOL bCreateIfNonExistant = true);
    BOOL StartBarter(OBJECT_ID oidTarget, OBJECT_ID oidItem, BOOL bFromActionQueue = false);
    void ClearHostileActionsVersus(CNWSCreature * pCreature);
    void PacifyCreature(OBJECT_ID oidTarget);
    void PacifyCreature();
    void ClearAutoMapData();
    void SetAutoMapData(int32_t nNumAreas, OBJECT_ID * pAreaList, uint8_t * * pMapTileData);
    void ReconcileAutoMapData();
    void SetAllTilesExplored(OBJECT_ID oidArea, BOOL bExplored = true);
    void SetTileExplored(OBJECT_ID oidArea, int32_t nXPos, int32_t nYPos, BOOL newState = true);
    BOOL GetTileExplored(OBJECT_ID oidArea, int32_t nXPos, int32_t nYPos);
    BOOL TranslateAddress(OBJECT_ID oidArea, int32_t nByteIndex, int32_t nBitIndex, int32_t * xPos, int32_t * yPos);
    BOOL CancelAction(uint16_t nActionID, uint16_t nGroupID);
    BOOL ForceMoveToPoint(CNWSForcedAction * pForcedAction);
    BOOL RequestBuy(OBJECT_ID oidItemToBuy, OBJECT_ID oidStore, OBJECT_ID oidDesiredRepository = 0x7f000000);
    BOOL RequestSell(OBJECT_ID oidItemToSell, OBJECT_ID oidStore);
    BOOL TransferGold(OBJECT_ID oidDestination, Vector vDestination, uint32_t nGoldAmount, BOOL bBarter, uint8_t nXpos = 0, uint8_t nYpos = 0);
    void CancelGoldTransfer(OBJECT_ID oidMaybeGold);
    void SetGold(int32_t nGold);
    void AddGold(int32_t nGoldToAdd, BOOL bDisplayFeedback = true);
    void RemoveGold(int32_t nGoldToRemove, BOOL bDisplayFeedback = true);
    void InitializeQuickbar();
    CNWSQuickbarButton * GetQuickbarButton(uint8_t nButton);
    void SetQuickbarButton_Item(uint8_t nButton, OBJECT_ID oidItem, int32_t nPropertyID, OBJECT_ID oidSecondaryItem);
    void SetQuickbarButton_Spell(uint8_t nButton, uint8_t nMultiClass, uint32_t nSpellID, uint8_t nMetaType, uint8_t nDomainLevel);
    void SetQuickbarButton_SpellLikeAbility(uint8_t nButton, uint32_t nSpellID, uint8_t nCasterLevel);
    void SetQuickbarButton_AssociateCommand(uint8_t nButton, int32_t nCommand, uint16_t nAssociateType, OBJECT_ID oidAssociate);
    void SetQuickbarButton_DungeonMaster_CreateCreature(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreateItem(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreateEncounter(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreateWaypoint(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreateTrigger(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreatePortal(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_DungeonMaster_CreatePlaceable(uint8_t nButton, const CResRef & ref, const CExoString & sToolTip);
    void SetQuickbarButton_CommandLine(uint8_t nButton, const CExoString & label, const CExoString & cmd);
    void SetQuickbarButton_DM_General_ResRefParam(uint8_t nButton, uint8_t nObjectType, const CResRef & ref);
    void SetQuickbarButton_GeneralNoParam(uint8_t nButton, uint8_t nObjectType);
    void SetQuickbarButton_GeneralINTParam(uint8_t nButton, uint8_t nObjectType, int32_t nParam);
    void QuickbarButton_RemoveItem(OBJECT_ID oidItem);
    void QuickbarButton_RemoveSpell(uint32_t nSpellId);
    BOOL LoadPolymorphData(CResGFF * pRes, CResStruct * pResStruct, BOOL bRunItemScripts = true);
    void LoadQuickButtons(CResGFF * pRes, CResStruct * pStruct);
    void CreateDefaultQuickButtons();
    void CreateDefaultQuickButtons_CheckItem(CNWSItem * pItem, uint32_t & nMaxCostRanged, uint32_t & nMaxCostMelee, OBJECT_ID & oidRangedWeapon, OBJECT_ID & oidMeleeWeapon);
    void CreateDefaultQuickButtons_AddFeat(uint8_t & nButton, uint16_t nFeat, BOOL bDomainFeat);
    void CreateDefaultQuickButtonsDM();
    void CopyQuickButtonsFromDM(CNWSPlayer * pPlayer);
    void LoadQuickBarHack(CExoString sFilename);
    void SaveQuickBarHack(CExoString sFilename);
    void ConvertModeToggleQuickButton(CNWSQuickbarButton * pButton);
    void LoadAutoMapData(CResGFF * pRes, CResStruct * pStruct);
    void SaveAutoMapData(CResGFF * pRes, CResStruct * pStruct);
    void ApplyDeathExperience();
    float CalculateDeathExperience(int32_t nPartyPotentialLevel, int32_t nPartyEffectiveLevel);
    void ResolveDamageShields(CNWSCreature * pAttacker);
    BOOL ResolveDefensiveEffects(CNWSObject * pTarget, BOOL bAttackHit = true);
    void ResolveInitiative();
    BOOL EquipMostDamagingMeleeWeapon(OBJECT_ID oidVersus, BOOL bOffHand, BOOL bEquipGeneralWeapon = false);
    BOOL EquipMostDamagingRangedWeapon(OBJECT_ID oidVersus);
    BOOL EquipMostDamagingAmmunition(OBJECT_ID oidVersus, CNWSItem * pWeapon);
    BOOL GetIsWeaponEffective(OBJECT_ID oidVersus, BOOL bOffHand);
    BOOL EquipMostEffectiveArmor();
    float GetSpotCheckDistance();
    float GetListenCheckDistance();
    void DoPerceptionUpdateOnCreature(CNWSCreature * pTarget, BOOL bHideInPlainSight = false);
    int32_t ComputeTotalWeightCarried();
    int32_t ComputeTotalEquippedWeight();
    BOOL UseLoreOnItem(OBJECT_ID oidItem);
    void PayToIdentifyItem(OBJECT_ID oidItem, OBJECT_ID oidStore = 0x7f000000);
    BOOL DecrementSpellReadyCount(uint32_t nSpellID, uint8_t nMultiClass, uint8_t nDomainLevel, uint8_t nMetaType, uint8_t nCasterLevel = 0xff);
    void AutoCloseGUIPanels(BOOL bCheckStoreDistance = true);
    void CutWaypointPath();
    void FailedOpenInformAssociates();
    void SawTrapInformAssociates(OBJECT_ID oidTrap);
    void AddToPVPList(OBJECT_ID oidPC);
    void RemoveFromPVPList(OBJECT_ID oidPC);
    void SetPVPPlayerLikesMe(OBJECT_ID oidPC, BOOL bNewAttitude, BOOL bSetReciprocal = true);
    BOOL GetPVPPlayerLikesMe(OBJECT_ID oidPC);
    void SetInTransit(int32_t nInTransit);
    BOOL Polymorph(int32_t nPolymorphType, CGameEffect * pParentEffect, BOOL bLoadingGame = false);
    BOOL UnPolymorph(CGameEffect * pParentEffect);
    CNWSCreRestorePolymorphData * RemovePolymorphFromOutputCreature();
    void RestorePolymorphToOutputCreature(CNWSCreRestorePolymorphData * polyData);
    int32_t GetTurnResistanceHD();
    uint16_t GetBodyBagAppearance();
    void CheckInventoryForPlotItems();
    void DumpToLog();
    BOOL GetIsCreatureBumpable(CNWSCreature * pBlockingCreature);
    void ExternalResolveAttack(OBJECT_ID oidTarget, int32_t nAttackTime);
    void BroadcastWhirlwindAttack(BOOL bAttackMessage);
    void RestoreItemPropertiesInRepository(CItemRepository * pItemRepository);
    BOOL BumpFriends(CNWSCreature * pBlockingCreature, const Vector & vStart, const Vector & vEnd);
    int32_t GetPVPReputation(OBJECT_ID oidSource);
    int32_t GetPVPPlayerLikesMe(OBJECT_ID oidPC, uint8_t nPVPSetting);
    void InitialisePVPList();
    void SetAssociatesToForgetAggression(OBJECT_ID oidTarget);
    void RemoveDominationEffect();
    uint8_t CanEquipWeapon(CNWSItem * pItem, uint32_t * nEquipToSlot, BOOL bEquipping, BOOL bDisplayFeedback, CNWSPlayer * pFeedbackPlayer = nullptr);
    uint8_t CanEquipShield(CNWSItem * pItem, BOOL bEquipping, BOOL bDisplayFeedback);
    uint8_t CanEquipMiscellaneous(CNWSItem * pItem, uint32_t * pEquipSlot, BOOL bEquipping, BOOL bDisplayFeedback);
    BOOL CheckProficiencies(CNWSItem * pItem, uint32_t nEquipToSlot);
    BOOL CheckItemClassRestrictions(CNWSItem * pItem);
    BOOL CheckItemAlignmentRestrictions(CNWSItem * pItem);
    BOOL CheckItemRaceRestrictions(CNWSItem * pItem);
    BOOL CheckUseMagicDeviceSkill(CNWSItem * pItem, int32_t nCheckType);
    void SaveQuickButtons(CResGFF * pRes, CResStruct * pStruct);
    void UpdateTrapCheck();
    void UpdateTrapCheckDM();
    BOOL DoStealthDetection(CNWSCreature * pHidingCreature, BOOL bClearLOS, BOOL * bSeen = nullptr, BOOL * bHeard = nullptr, BOOL bTargetHiding = false);
    BOOL DoListenDetection(CNWSCreature * pHidingCreature, BOOL bTargetInvisible);
    BOOL DoSpotDetection(CNWSCreature * pHidingCreature, BOOL bTargetInvisible);
    float ComputeTotalWalkDistance();
    void ComputeAIStateOnAction(int32_t nActionId, OBJECT_ID oidActionTarget);
    BOOL ClearAction(CNWSObjectActionNode * pNode, BOOL bIsTopmostAction);
    void UpdateCombatRoundTimer();
    void UpdateEffectPtrs();
    void UpdateAttributesOnEffect(CGameEffect * e, BOOL bLoadingGame = false);
    void AddToAssociateList(OBJECT_ID oidAssociate);
    void RemoveFromAssociateList(OBJECT_ID oidAssociate);
    void ReprocessAssociateList();
    void CheckMasterIsValid(uint32_t nCalendarDay, uint32_t nTimeOfDay);
    void SummonAssociate(CResRef cResRef, CExoString sAssociateName, uint16_t nAssociateType);
    BOOL CheckVisibleList(OBJECT_ID oidCreature);
    void ResolveAttack(OBJECT_ID oidTarget, int32_t nAttacks, int32_t nTimeAnimation);
    void ResolveAttackRoll(CNWSObject * pTarget);
    void ResolveSneakAttack(CNWSCreature * pTarget);
    void ResolveDeathAttack(CNWSCreature * pTarget);
    void ResolveCachedSpecialAttacks();
    void ResolveSituationalModifiers(CNWSObject * pTarget);
    void ResolveDamage(CNWSObject * pTarget);
    void ResolveItemCastSpell(CNWSObject * pTarget);
    void ResolveElementalDamage(CNWSObject * pTarget);
    void ResolveOnHitEffect(CNWSObject * pTarget, BOOL bOffHandAttack, BOOL bCritical);
    void ResolveOnHitVisuals(CNWSObject * pTarget);
    void ResolveRangedAttack(CNWSObject * pTarget, int32_t nAttacks, int32_t nTimeAnimation);
    void ResolveRangedSpecialAttack(CNWSObject * pTarget, int32_t nTimeAnimation);
    void ResolvePostRangedDamage(CNWSObject * pTarget);
    void ResolveRangedAnimations(CNWSObject * pTarget, int32_t nTimeAnimation);
    void ResolveRangedMiss(CNWSObject * pTarget);
    void SignalRangedDamage(CNWSObject * pTarget, int32_t nAttacks);
    void ResolveAmmunition(uint32_t nTimeIndex);
    void ResolveSafeProjectile(uint32_t nTimeIndex, int32_t nAttackIndex);
    int32_t GetAmmunitionAvailable(int32_t nNumAttacks);
    void ResolveMeleeAttack(CNWSObject * pTarget, int32_t nAttacks, int32_t nTimeAnimation);
    void ResolveMeleeSpecialAttack(int32_t nAttackIndex, int32_t nAttacks, CNWSObject * pTarget, int32_t nTimeAnimation);
    void ResolveMeleeAnimations(int32_t nAttackIndex, int32_t nAttacks, CNWSObject * pTarget, int32_t nTimeAnimation);
    void ResolvePostMeleeDamage(CNWSObject * pTarget);
    void SignalMeleeDamage(CNWSObject * pTarget, int32_t nAttacks);
    void ApplyOnHitBlindness(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitConfusion(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitDaze(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitDeafness(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitDeathAttack(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitDominate(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitDoom(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitFear(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitHold(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitSilence(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitSleep(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitSlow(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitStun(CNWSObject * pTarget, int32_t nDurationRounds);
    void ApplyOnHitWounding(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitVorpal(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitCastSpell(CNWSObject * pTarget, CNWItemProperty * pProperty, CNWSItem * pItem);
    void ApplyOnHitDispelMagic(CNWSObject * pTarget, OBJECT_ID oidAttackItem);
    void ApplyOnHitGreaterDispel(CNWSObject * pTarget, OBJECT_ID oidAttackItem);
    void ApplyOnHitKnock(CNWSObject * pTarget, OBJECT_ID oidAttackItem);
    void ApplyOnHitLesserDispel(CNWSObject * pTarget, OBJECT_ID oidAttackItem);
    void ApplyOnHitMordysDisjunction(CNWSObject * pTarget, OBJECT_ID oidAttackItem);
    void ApplyOnHitVampiricRegeneration(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitDispelMagic(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitAbilityDamage(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitDisease(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitPoison(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitSlayAlignment(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitSlayAlignmentGroup(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitSlayRacialGroup(CNWSObject * pTarget, CNWItemProperty * pProperty);
    void ApplyOnHitLevelDrain(CNWSObject * pTarget, CNWItemProperty * pProperty);
    BOOL GetCanSlayAlignment(CNWSObject * pTarget, CNWItemProperty * pProperty);
    int32_t CalculateMaxElementalDamage(CNWSObject * pTarget, BOOL bOffHand);
    uint32_t CalculateProjectileTimeToTarget(Vector vPosition, BOOL bThrownWeapon);
    uint32_t WalkUpdateLocation();
    BOOL WalkUpdateLocationDistance(float fDistance, Vector * vNewPosition, Vector * vNewOrientation, CExoArrayList<OBJECT_ID> * aIntersectingSubAreas);
    BOOL WalkUpdateLocationTestDistance(Vector vStart, Vector vEnd);


#ifdef NWN_CLASS_EXTENSION_CNWSCreature
    NWN_CLASS_EXTENSION_CNWSCreature
#endif
};


#ifdef NWN_API_EPILOGUE
NWN_API_EPILOGUE(CNWSCreature)
#endif

