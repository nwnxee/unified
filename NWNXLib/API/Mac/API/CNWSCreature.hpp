#pragma once

#include <cstdint>

#include "CExoArrayListTemplatedCEffectIconObjectPtr.hpp"
#include "CExoArrayListTemplatedCGameEffectPtr.hpp"
#include "CExoArrayListTemplatedCNWVisibilityNodePtr.hpp"
#include "CExoArrayListTemplatedlongunsignedint.hpp"
#include "CExoString.hpp"
#include "CNWActionNode.hpp"
#include "CNWSCreatureAppearanceInfo.hpp"
#include "CNWSObject.hpp"
#include "CResRef.hpp"
#include "Vector.hpp"

namespace NWNXLib {

namespace API {

// Forward class declarations (defined in the source file)
struct CExoArrayListTemplatedCNWSInvitationDetails;
struct CExoArrayListTemplatedCNWSPVPEntry;
struct CExoArrayListTemplatedCNWSPersonalReputation;
struct CExoArrayListTemplatedint;
struct CExoArrayListTemplatedunsignedlong;
struct CExoLocString;
struct CGameEffect;
struct CItemRepository;
struct CNWCCMessageData;
struct CNWItemProperty;
struct CNWSArea;
struct CNWSBarter;
struct CNWSCombatAttackData;
struct CNWSCombatRound;
struct CNWSCreRestorePolymorphData;
struct CNWSCreatureStats;
struct CNWSFaction;
struct CNWSForcedAction;
struct CNWSInventory;
struct CNWSItem;
struct CNWSJournal;
struct CNWSObjectActionNode;
struct CNWSPlayer;
struct CNWSQuickbarButton;
struct CNWVisibilityNode;
struct CPathfindInformation;
struct CResGFF;
struct CResStruct;

struct CNWSCreature
    : CNWSObject
{
    int32_t m_bPonyRide;
    uint16_t m_nEquipArrayIndex;
    uint32_t m_poidCntrSpellObjects[10];
    int32_t m_nNumCntrSpellObjects;
    CExoString m_sScripts[13];
    CExoString m_sOriginalScripts[13];
    CNWSQuickbarButton* m_pQuickbarButton;
    int32_t m_bLootable;
    uint32_t m_nDecayTime;
    uint32_t m_oidBodyBag;
    uint32_t m_oidDesiredArea;
    Vector m_vDesiredAreaLocation;
    int32_t m_bDesiredAreaUpdateComplete;
    CExoArrayListTemplatedlongunsignedint m_aLinkedAreaOfEffectObjects;
    CExoArrayListTemplatedlongunsignedint m_aInSubAreas;
    uint32_t m_oidBlockingDoor;
    CPathfindInformation* m_pcPathfindInformation;
    float m_fMovementScaleFactor;
    int32_t m_bUpdateCombatInformation;
    int32_t m_nNumCharSheetViewers;
    int32_t m_bUpdateSpellSlots;
    int32_t m_bOnCreationScriptExecuted;
    uint32_t m_nLastHeartbeatScriptCalendarDay;
    uint32_t m_nLastHeartbeatScriptTimeOfDay;
    uint32_t m_nHeartbeatInterval;
    uint32_t m_nLastRestRadiusCheckDay;
    uint32_t m_nLastRestRadiusCheckTimeOfDay;
    uint32_t m_oidLastTrapDetected;
    uint32_t m_nLastTrapCheckCalendarDay;
    uint32_t m_nLastTrapCheckTimeOfDay;
    uint32_t m_nLastStealthCheckCalendarDay;
    uint32_t m_nLastStealthCheckTimeOfDay;
    uint32_t m_nExcitedStateTimer;
    uint32_t m_nLastVisibleCreaturesCheckCalendarDay;
    uint32_t m_nLastVisibleCreaturesCheckTimeOfDay;
    int32_t m_nChecksVisibleList;
    uint32_t m_nChecksHeartbeat;
    uint32_t m_nMoveSpeedTimer;
    int32_t m_bPendingRealization;
    uint8_t m_nPersonalReputationHeartbeatCount;
    int32_t m_nLastActionQueueUpdateDay;
    int32_t m_nLastActionQueueUpdateTimeOfDay;
    CNWActionNode m_pActionQueue[10];
    uint8_t m_nAmbientAnimationState;
    CExoString m_sModelType;
    CExoArrayListTemplatedlongunsignedint m_oidAutoMapAreaList;
    uint8_t** m_nAutoMapTileData;
    int32_t m_bAutoMapAutoExplores;
    uint8_t m_nLastExploredTileX;
    uint8_t m_nLastExploredTileY;
    uint32_t oidLastExploredArea;
    uint8_t m_nDetectMode;
    uint8_t m_nStealthMode;
    uint8_t m_nDefensiveCastingMode;
    uint8_t m_nCombatMode;
    uint8_t m_nDesiredCombatMode;
    uint32_t m_oidCounterSpellTarget;
    uint8_t m_nInitiativeRoll;
    int32_t m_bInitiativeExpired;
    int32_t m_bCombatState;
    int32_t m_nCombatStateTimer;
    int32_t m_bPassiveAttackBehaviour;
    int32_t m_bHasArms;
    int32_t m_bHasLegs;
    int32_t m_bDisarmable;
    int32_t m_nCreatureSize;
    float m_fPreferredAttackDistance;
    float m_fWeaponScale;
    uint32_t m_oidAttackTarget;
    uint32_t m_oidAttemptedAttackTarget;
    Vector m_vLastAttackPosition;
    uint32_t m_oidGoingToBeAttackedBy;
    uint32_t m_oidAttemptedSpellTarget;
    uint32_t m_oidSpellTarget;
    int32_t m_nLastAmmoWarning;
    int32_t m_nLastCombatRoundUpdate;
    int32_t m_nLastRunningAOOUpdate;
    int32_t m_bBroadcastedAOOTo;
    int32_t m_nLastRunningAOOTimeOut;
    int32_t m_bExternalCombatModeEnabled;
    int32_t m_bSilent;
    int32_t m_bHasted;
    int32_t m_bSlowed;
    int32_t m_bTaunt;
    int32_t m_bForcedWalk;
    uint8_t m_nVisionType;
    uint8_t m_nState;
    uint32_t m_nEffectSpellId;
    CExoArrayListTemplatedCEffectIconObjectPtr m_aEffectIcons;
    int32_t m_bCutsceneCameraMode;
    float m_fCutsceneCameraMoveFactor;
    int32_t m_bWasPlotCreature;
    int32_t m_bCutsceneGhost;
    uint32_t m_oidLastPerception;
    int32_t m_bLastPerceptionHeard;
    int32_t m_bLastPerceptionSeen;
    int32_t m_bLastPerceptionInaudible;
    int32_t m_bLastPerceptionVanished;
    float m_fSpotCheckDistance;
    float m_fMaxSpotCheckDistance;
    float m_fListenCheckDistance;
    float m_fMaxListenCheckDistance;
    float m_fBlindsightDistance;
    uint8_t m_nLastHideRoll;
    uint8_t m_nLastMoveSilentlyRoll;
    uint8_t m_nLastSpotRoll;
    uint8_t m_nLastListenRoll;
    CExoArrayListTemplatedCNWVisibilityNodePtr m_pVisibleCreaturesList;
    uint32_t m_oidInvitedToPartyBy;
    int32_t m_bInvitedToParty;
    uint32_t m_nInvitedToPartyDay;
    uint32_t m_nInvitedToPartyTimeOfDay;
    CExoArrayListTemplatedCNWSInvitationDetails* m_pInvitationsOffered;
    CExoArrayListTemplatedCNWSInvitationDetails* m_pInvitationsIgnored;
    uint32_t m_oidLockOnTargetObj;
    int32_t m_nLastCounterSpellID;
    uint8_t m_nLastCounterSpellClass;
    uint8_t m_nLastCounterMetaType;
    uint8_t m_nLastCounterDomainLevel;
    CExoArrayListTemplatedlongunsignedint m_poidSpellIdentified;
    uint32_t m_oidLastSpellCastItem;
    int32_t m_bLastSpellUnReadied;
    int32_t m_bLastItemCastSpell;
    int32_t m_nLastItemCastSpellLevel;
    int32_t m_bItemCastSpellBroadcastAOO;
    uint32_t m_oidSittingObject;
    int32_t m_bStealAnimationPlayed;
    int32_t m_bStealAttemptDetected;
    int32_t m_bHealAnimationPlayed;
    int32_t m_bTrapAnimationPlayed;
    int32_t m_bUnlockAnimationPlayed;
    int32_t m_bLockAnimationPlayed;
    int32_t m_bDropItemAnimationPlayed;
    int32_t m_bPickUpItemAnimationPlayed;
    int32_t m_bTauntAnimationPlayed;
    uint32_t m_nRestDurationPerHPGain;
    uint32_t m_nRestHPToRecover;
    uint32_t m_nRestDurationPerSpellLevelGain;
    uint32_t m_nRestSpellLevelToRecover;
    int32_t m_bFacingAndAnimationDone;
    int32_t m_bMagicalArrowsEquipped;
    int32_t m_bMagicalBoltsEquipped;
    int32_t m_bMagicalBulletsEquipped;
    uint32_t* m_pSkillTimer;
    CNWSCombatRound* m_pcCombatRound;
    CNWSJournal* m_pJournal;
    CNWSBarter* m_pBarterInfo;
    uint32_t m_nGold;
    int32_t m_bPlayerCharacter;
    uint16_t m_nSoundSet;
    int32_t m_nFootstepType;
    uint8_t m_nBodyBag;
    int32_t m_nInTransit;
    int32_t m_bPoisoned;
    int32_t m_bDiseased;
    int32_t m_bIsImmortal;
    int32_t m_bNoPermDeath;
    CExoString m_sDisplayName;
    int32_t m_bUpdateDisplayName;
    uint16_t m_nAIState;
    uint8_t m_nAIStateAction;
    uint32_t m_oidAIStateActee;
    uint8_t m_nAIStateOutput;
    uint32_t m_nActivities;
    uint32_t m_nActivitiesLocked;
    float m_fMovementRateFactor;
    float m_fDriveModeMoveFactor;
    uint8_t m_nWalkAnimation;
    int32_t m_bDriveMode;
    int32_t m_bJumpedRecently;
    uint32_t m_oidMaster;
    CExoArrayListTemplatedlongunsignedint* m_pAssociateList;
    uint16_t m_nAssociateType;
    int32_t m_nLastAssociateCommand;
    int32_t m_bSummonedAnimalCompanion;
    int32_t m_bSummonedFamiliar;
    int32_t m_bMasterDroppedFromServer;
    uint32_t m_nMasterDroppedCalendarDay;
    uint32_t m_nMasterDroppedTimeOfDay;
    int32_t m_nOriginalFactionId;
    CExoArrayListTemplatedCNWSPersonalReputation* m_pPersonalReputationList;
    CExoArrayListTemplatedint* m_pReputation;
    CExoArrayListTemplatedCNWSPVPEntry* m_pPVPList;
    uint32_t m_oidEncounter;
    int32_t m_bAlreadyRemovedFromEncounter;
    CNWSInventory* m_pInventory;
    CItemRepository* m_pcItemRepository;
    uint16_t m_nRepositoryArrayIndex;
    uint16_t m_nItemContainerArrayIndex;
    uint32_t m_oidCurrentItemContainer;
    int32_t m_nEquippedWeight;
    int32_t m_bComputeWeightCarried;
    int32_t m_nEncumbranceState;
    int32_t m_bLastPickupFailed;
    int32_t m_nTotalWeightCarried;
    uint32_t m_pPrePolymorphedItems[18];
    CResRef m_refPrePolymorphPortrait;
    uint16_t m_nPrePolymorphPortraitId;
    int32_t m_bIsPolymorphed;
    uint16_t m_nPrePolymorphAppearanceType;
    uint8_t m_nPrePolymorphSTR;
    uint8_t m_nPrePolymorphCON;
    uint8_t m_nPrePolymorphDEX;
    uint16_t m_nPrePolymorphRacialType;
    int16_t m_nPrePolymorphHP;
    int32_t m_nPolymorphSpellId1;
    int32_t m_nPolymorphSpellId2;
    int32_t m_nPolymorphSpellId3;
    uint64_t m_nPolymorphACBonusEffect;
    uint64_t m_nPolymorphHPBonusEffect;
    int32_t m_bHasPrePolymorphCreatureWeaponProficiency;
    int32_t m_bPolymorphing;
    int32_t m_bPolymorphLocked;
    CNWSCreatureAppearanceInfo m_cAppearance;
    CNWSCreatureStats* m_pStats;
    uint32_t m_nLastRestCalendarDay;
    uint32_t m_nLastRestTimeOfDay;

    // The below are auto generated stubs.
    CNWSCreature() = default;
    CNWSCreature(const CNWSCreature&) = default;
    CNWSCreature& operator=(const CNWSCreature&) = default;

    CNWSCreature(uint32_t, int32_t, int32_t);
    ~CNWSCreature();
    int32_t AcquireItem(CNWSItem**, uint32_t, uint32_t, unsigned char, unsigned char, int32_t, int32_t);
    void ActionManager(uint32_t);
    void ActivityManager(uint32_t);
    int32_t AddAnimalEmpathyAction(uint32_t);
    int32_t AddAppearActions(int32_t);
    void AddAssociate(uint32_t, uint16_t);
    int32_t AddAttackActions(uint32_t, int32_t, int32_t, int32_t);
    int32_t AddCastSpellActions(uint32_t, int32_t, int32_t, int32_t, int32_t, Vector, uint32_t, int32_t, int32_t, int32_t, unsigned char, int32_t, int32_t, int32_t, unsigned char);
    int32_t AddCounterSpellActions(uint32_t);
    int32_t AddDisappearActions(int32_t, int32_t);
    int32_t AddDriveAction(uint16_t, const Vector&, int32_t, int32_t, int32_t, int32_t);
    int32_t AddDropItemActions(uint32_t, Vector, int32_t);
    int32_t AddEquipItemActions(CNWSItem*, uint32_t, int32_t, int32_t, uint32_t);
    void AddGold(int32_t, int32_t);
    int32_t AddHealActions(uint32_t, uint32_t, int32_t);
    int32_t AddItemCastSpellActions(uint32_t, int32_t, int32_t, Vector, uint32_t, int32_t);
    int32_t AddMoveToPointAction(uint16_t, Vector, uint32_t, uint32_t, int32_t, float, float, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
    int32_t AddMoveToPointActionToFront(uint16_t, Vector, uint32_t, uint32_t, int32_t, float, float, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
    int32_t AddPathfindingWaitActionToFront(uint16_t);
    int32_t AddPickPocketActions(uint32_t);
    int32_t AddPickUpItemActions(uint32_t, uint32_t, unsigned char, unsigned char);
    int32_t AddRepositoryMoveActions(CNWSItem*, uint32_t, unsigned char, unsigned char);
    int32_t AddSitActions(uint32_t);
    int32_t AddTauntActions(uint32_t);
    void AddToArea(CNWSArea*, float, float, float, int32_t);
    void AddToAssociateList(uint32_t);
    void AddToInvitationsIgnored(uint32_t);
    void AddToInvitationsOffered(uint32_t);
    void AddToPersonalReputationList(uint32_t, int32_t, int32_t, float);
    void AddToPVPList(uint32_t);
    void AddToVisibleList(uint32_t, int32_t, int32_t, unsigned char, int32_t);
    int32_t AddTrapActions(uint32_t, unsigned char, uint32_t, Vector, uint32_t);
    int32_t AddUnequipActions(CNWSItem*, uint32_t, unsigned char, unsigned char, int32_t, int32_t, uint32_t);
    int32_t AddUseTalentAtLocationActions(int32_t, int32_t, Vector, unsigned char, uint32_t, int32_t, unsigned char, unsigned char);
    int32_t AddUseTalentOnObjectActions(int32_t, int32_t, uint32_t, unsigned char, uint32_t, int32_t, unsigned char, unsigned char);
    void AdjustReputation(int32_t, int32_t);
    uint32_t AIActionAnimalEmpathy(CNWSObjectActionNode*);
    uint32_t AIActionAppear(CNWSObjectActionNode*);
    uint32_t AIActionAreaWait(CNWSObjectActionNode*);
    uint32_t AIActionAttackObject(CNWSObjectActionNode*);
    uint32_t AIActionBarter(CNWSObjectActionNode*);
    uint32_t AIActionCastSpell(CNWSObjectActionNode*);
    uint32_t AIActionChangeFacingObject(CNWSObjectActionNode*);
    uint32_t AIActionChangeFacingPoint(CNWSObjectActionNode*);
    uint32_t AIActionCheckForceFollowObject(CNWSObjectActionNode*);
    uint32_t AIActionCheckInterAreaPathfinding(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveAwayFromLocation(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveAwayFromObject(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveToObject(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveToObjectRadius(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveToPoint(CNWSObjectActionNode*);
    uint32_t AIActionCheckMoveToPointRadius(CNWSObjectActionNode*);
    uint32_t AIActionCounterSpell(CNWSObjectActionNode*);
    uint32_t AIActionDisappear(CNWSObjectActionNode*);
    uint32_t AIActionDisarmTrap(CNWSObjectActionNode*);
    uint32_t AIActionDrive(CNWSObjectActionNode*);
    uint32_t AIActionDropItem(CNWSObjectActionNode*);
    uint32_t AIActionEncounterCreatureDestroySelf();
    uint32_t AIActionEquipItem(CNWSObjectActionNode*);
    uint32_t AIActionExamine(CNWSObjectActionNode*);
    uint32_t AIActionExamineTrap(CNWSObjectActionNode*);
    uint32_t AIActionFlagTrap(CNWSObjectActionNode*);
    uint32_t AIActionForceFollowObject(CNWSObjectActionNode*);
    uint32_t AIActionHeal(CNWSObjectActionNode*);
    uint32_t AIActionItemCastSpell(CNWSObjectActionNode*);
    uint32_t AIActionJumpToObject(CNWSObjectActionNode*);
    uint32_t AIActionJumpToPoint(CNWSObjectActionNode*);
    uint32_t AIActionMoveToPoint(CNWSObjectActionNode*);
    uint32_t AIActionOrientCamera(CNWSObjectActionNode*);
    uint32_t AIActionPickPocket(CNWSObjectActionNode*);
    uint32_t AIActionPickUpItem(CNWSObjectActionNode*);
    uint32_t AIActionRandomWalk(CNWSObjectActionNode*);
    uint32_t AIActionRecoverTrap(CNWSObjectActionNode*);
    uint32_t AIActionRepositoryMove(CNWSObjectActionNode*);
    uint32_t AIActionRest(CNWSObjectActionNode*);
    uint32_t AIActionSetTrap(CNWSObjectActionNode*);
    uint32_t AIActionSit(CNWSObjectActionNode*);
    uint32_t AIActionTaunt(CNWSObjectActionNode*);
    uint32_t AIActionUnequipItem(CNWSObjectActionNode*);
    uint32_t AIActionWaitForEndOfRound(CNWSObjectActionNode*);
    void AIUpdate();
    void ApplyDeathExperience();
    int32_t ApplyDiseasePayload(CGameEffect*, uint32_t, uint32_t);
    void ApplyOnHitAbilityDamage(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitBlindness(CNWSObject*, int32_t);
    void ApplyOnHitCastSpell(CNWSObject*, CNWItemProperty*, CNWSItem*);
    void ApplyOnHitConfusion(CNWSObject*, int32_t);
    void ApplyOnHitDaze(CNWSObject*, int32_t);
    void ApplyOnHitDeafness(CNWSObject*, int32_t);
    void ApplyOnHitDeathAttack(CNWSObject*, int32_t);
    void ApplyOnHitDisease(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitDispelMagic(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitDispelMagic(CNWSObject*, uint32_t);
    void ApplyOnHitDominate(CNWSObject*, int32_t);
    void ApplyOnHitDoom(CNWSObject*, int32_t);
    void ApplyOnHitFear(CNWSObject*, int32_t);
    void ApplyOnHitGreaterDispel(CNWSObject*, uint32_t);
    void ApplyOnHitHold(CNWSObject*, int32_t);
    void ApplyOnHitKnock(CNWSObject*, uint32_t);
    void ApplyOnHitLesserDispel(CNWSObject*, uint32_t);
    void ApplyOnHitLevelDrain(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitMordysDisjunction(CNWSObject*, uint32_t);
    void ApplyOnHitPoison(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitSilence(CNWSObject*, int32_t);
    void ApplyOnHitSlayAlignment(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitSlayAlignmentGroup(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitSlayRacialGroup(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitSleep(CNWSObject*, int32_t);
    void ApplyOnHitSlow(CNWSObject*, int32_t);
    void ApplyOnHitStun(CNWSObject*, int32_t);
    void ApplyOnHitVampiricRegeneration(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitVorpal(CNWSObject*, CNWItemProperty*);
    void ApplyOnHitWounding(CNWSObject*, CNWItemProperty*);
    int32_t ApplyPoisonPayload(CGameEffect*, uint32_t, uint32_t);
    int32_t ApplyWounding(CGameEffect*);
    CNWSCreature* AsNWSCreature();
    void AutoCloseGUIPanels(int32_t);
    void BringAssociatesToNewFaction(int32_t);
    void BroadcastAssociateCommand(int32_t);
    void BroadcastAttackDataToParty(CNWCCMessageData*, CNWSCombatAttackData*, CNWSCreature*);
    void BroadcastAttackOfOpportunity(uint32_t, int32_t);
    void BroadcastBattleCry();
    void BroadcastCombatStateToParty();
    void BroadcastDamageDataToParty(CNWCCMessageData*, CNWSCreature*);
    void BroadcastDeathDataToParty(CNWCCMessageData*, CNWSCreature*);
    void BroadcastFloatyData(CNWCCMessageData*);
    void BroadcastSavingThrowData(CNWCCMessageData*);
    void BroadcastSkillData(CNWCCMessageData*);
    void BroadcastSpellCast(uint32_t, unsigned char, uint16_t);
    void BroadcastVoiceChat(unsigned char);
    void BroadcastWhirlwindAttack(int32_t);
    int32_t BumpFriends(CNWSCreature*, const Vector&, const Vector&);
    unsigned char CalculateDamagePower(CNWSObject*, int32_t);
    float CalculateDeathExperience(int32_t, int32_t);
    int32_t CalculateMaxElementalDamage(CNWSObject*, int32_t);
    int32_t CalculatePersonalReputationAdjustment(uint32_t);
    uint32_t CalculateProjectileTimeToTarget(Vector, int32_t);
    int32_t CalculateSpellSaveDC(int32_t);
    int32_t CancelAction(uint16_t, uint16_t);
    void CancelGoldTransfer(uint32_t);
    void CancelRest(uint16_t);
    unsigned char CanEquipItem(CNWSItem*, uint32_t*, int32_t, int32_t, int32_t, CNWSPlayer*);
    unsigned char CanEquipMiscellaneous(CNWSItem*, uint32_t*, int32_t, int32_t);
    unsigned char CanEquipShield(CNWSItem*, int32_t, int32_t);
    unsigned char CanEquipWeapon(CNWSItem*, uint32_t*, int32_t, int32_t, CNWSPlayer*);
    unsigned char CanUnEquipWeapon(CNWSItem*);
    int32_t CanUseItem(CNWSItem*, int32_t);
    void CheckInventoryForPlotItems();
    int32_t CheckItemAlignmentRestrictions(CNWSItem*);
    int32_t CheckItemClassRestrictions(CNWSItem*);
    int32_t CheckItemRaceRestrictions(CNWSItem*);
    void CheckMasterIsValid(uint32_t, uint32_t);
    int32_t CheckProficiencies(CNWSItem*, uint32_t);
    int32_t CheckUseMagicDeviceSkill(CNWSItem*, int32_t);
    int32_t CheckVisibleList(uint32_t);
    void CleanInvitationLists(int32_t);
    void CleanOutPersonalReputationList();
    int32_t ClearAction(CNWSObjectActionNode*, int32_t);
    void ClearActivities(int32_t);
    void ClearAutoMapData();
    void ClearHostileActionsVersus(CNWSCreature*);
    void ClearPersonalReputation(uint32_t);
    void ClearVisibleList();
    void ComputeAIState();
    void ComputeAIStateOnAction(int32_t, uint32_t);
    void ComputeArmourClass(CNWSItem*, int32_t, int32_t);
    void ComputeModifiedMovementRate();
    float ComputeSpellRange(CExoString, uint32_t);
    int32_t ComputeTotalEquippedWeight();
    float ComputeTotalWalkDistance();
    int32_t ComputeTotalWeightCarried();
    void ConvertModeToggleQuickButton(CNWSQuickbarButton*);
    void CopyQuickButtonsFromDM(CNWSPlayer*);
    void CreateDefaultQuickButtons();
    void CreateDefaultQuickButtons_AddFeat(unsigned char&, uint16_t, int32_t);
    void CreateDefaultQuickButtons_CheckItem(CNWSItem*, uint32_t&, uint32_t&, uint32_t&, uint32_t&);
    void CreateDefaultQuickButtonsDM();
    void CutWaypointPath();
    int32_t DecrementSpellReadyCount(uint32_t, unsigned char, unsigned char, unsigned char, unsigned char);
    float DesiredAttackRange(uint32_t, int32_t);
    void DestroyEquippedItems();
    void DisplayFloatyDataToSelf(uint32_t);
    void DMClearScripts(int32_t);
    void DMResetClearedScripts(int32_t);
    void DoCombatStep(unsigned char, int32_t, uint32_t);
    void DoDamage(int32_t);
    int32_t DoListenDetection(CNWSCreature*, int32_t);
    void DoPerceptionUpdateOnCreature(CNWSCreature*, int32_t);
    int32_t DoSpotDetection(CNWSCreature*, int32_t);
    int32_t DoStealthDetection(CNWSCreature*, int32_t, int32_t*, int32_t*, int32_t);
    uint32_t DriveUpdateLocation(int32_t);
    void DumpToLog();
    int32_t EquipItem(uint32_t, CNWSItem*, int32_t, int32_t);
    int32_t EquipMostDamagingAmmunition(uint32_t, CNWSItem*);
    int32_t EquipMostDamagingMeleeWeapon(uint32_t, int32_t, int32_t);
    int32_t EquipMostDamagingRangedWeapon(uint32_t);
    int32_t EquipMostEffectiveArmor();
    int32_t EvaluateLock(CNWSObject*, int32_t);
    void EventHandler(uint32_t, uint32_t, void*, uint32_t, uint32_t);
    void ExternalResolveAttack(uint32_t, int32_t);
    void FailedOpenInformAssociates();
    int32_t ForceMoveToPoint(CNWSForcedAction*);
    int32_t GetActivity(int32_t);
    int32_t GetAmmunitionAvailable(int32_t);
    int16_t GetArmorClass();
    uint32_t GetAssociateId(uint16_t, int32_t);
    int32_t GetAttackResultHit(CNWSCombatAttackData*);
    CNWSBarter* GetBarterInfo(int32_t);
    int32_t GetBlind();
    uint16_t GetBodyBagAppearance();
    int32_t GetCanSlayAlignment(CNWSObject*, CNWItemProperty*);
    int32_t GetCreatureReputation(uint32_t, int32_t, int32_t);
    uint16_t GetDamageFlags();
    unsigned char GetDetectMode();
    int32_t GetDialogInterruptable();
    CResRef GetDialogResref();
    uint32_t GetDominatedCreatureId();
    uint32_t GetEffectSpellId();
    CNWSFaction* GetFaction();
    CExoArrayListTemplatedCGameEffectPtr GetFilteredEffectList(unsigned char);
    CExoLocString& GetFirstName();
    int32_t GetFlanked(CNWSCreature*);
    int32_t GetFlatFooted();
    unsigned char GetGender();
    int32_t GetHasInvisbilityEffectApplied();
    int32_t GetHenchmanIndex(uint32_t);
    int32_t GetInvisible(CNWSObject*, int32_t);
    int32_t GetIsAbleToPossessFamiliar();
    int32_t GetIsCreatureBumpable(CNWSCreature*);
    int32_t GetIsInInvitationsIgnored(uint32_t);
    int32_t GetIsInInvitationsOffered(uint32_t);
    int32_t GetIsInMelee();
    int32_t GetIsInUseRange(uint32_t, float, int32_t);
    int32_t GetIsPossessedFamiliar();
    int32_t GetIsWeaponEffective(uint32_t, int32_t);
    uint32_t GetItemCount(int32_t);
    CNWSJournal* GetJournal();
    CExoLocString& GetLastName();
    float GetListenCheckDistance();
    uint32_t GetLockOrientationToObject();
    int16_t GetMaxHitPoints(int32_t);
    int32_t GetMode(unsigned char);
    float GetMovementRateFactor();
    uint32_t GetNearestEnemy(float, uint32_t, int32_t, int32_t);
    int32_t GetNumAssociatesOfType(uint16_t);
    int32_t GetNumCounterSpellingCreatures(uint32_t);
    int32_t GetNumInvited();
    CResRef GetPortrait();
    int32_t GetPVPPlayerLikesMe(uint32_t);
    int32_t GetPVPReputation(uint32_t);
    CNWSQuickbarButton* GetQuickbarButton(unsigned char);
    int32_t GetRangeWeaponEquipped();
    int32_t GetRelativeWeaponSize(CNWSItem*);
    float GetRunRate();
    int32_t GetSpellOrHealActionQueued();
    float GetSpotCheckDistance();
    int32_t GetStandardFactionReputation(int32_t);
    int32_t GetTileExplored(uint32_t, int32_t, int32_t);
    int32_t GetTotalEffectBonus(unsigned char, CNWSObject*, int32_t, int32_t, unsigned char, unsigned char, unsigned char, unsigned char, int32_t);
    int32_t GetTurnResistanceHD();
    int32_t GetUnarmed();
    int32_t GetUseMonkAbilities();
    int32_t GetUseRange(uint32_t, Vector&, float&);
    CNWVisibilityNode* GetVisibleListElement(uint32_t);
    float GetWalkRate();
    int32_t GetWeaponPower(CNWSObject*, int32_t);
    int32_t HandleSubAreaStateChanges(CExoArrayListTemplatedunsignedlong*, CExoArrayListTemplatedunsignedlong*, int32_t);
    void InitialisePVPList();
    void InitializeQuickbar();
    int32_t LearnScroll(uint32_t);
    void LoadAssociateList(CResGFF*, CResStruct*);
    void LoadAutoMapData(CResGFF*, CResStruct*);
    int32_t LoadCreature(CResGFF*, CResStruct*, int32_t, int32_t, int32_t, int32_t);
    int32_t LoadFromTemplate(CResRef, CExoString*);
    void LoadPersonalReputationList(CResGFF*, CResStruct*);
    int32_t LoadPolymorphData(CResGFF*, CResStruct*, int32_t);
    void LoadQuickBarHack(CExoString);
    void LoadQuickButtons(CResGFF*, CResStruct*);
    float MaxAttackRange(uint32_t, int32_t, int32_t);
    void MergeItem(CNWSItem*, CNWSItem*);
    void NotifyAssociateActionToggle(int32_t);
    void PacifyCreature();
    void PacifyCreature(uint32_t);
    void PayToIdentifyItem(uint32_t, uint32_t);
    int32_t Polymorph(int32_t, CGameEffect*, int32_t);
    void PossessCreature(uint32_t);
    void PossessCreatureDM(uint32_t, unsigned char);
    void PossessFamiliar();
    void PostProcess();
    void ProcessMasterDeathForAssociates();
    void ProcessPendingCombatActions();
    void QuickbarButton_RemoveItem(uint32_t);
    void QuickbarButton_RemoveSpell(uint32_t);
    void ReadItemsFromGff(CResGFF*, CResStruct*, int32_t, int32_t);
    void ReadScriptsFromGff(CResGFF*, CResStruct*);
    void RealizeAssociateList();
    void ReceiveAssociateCommand(int32_t);
    void RecomputeAmbientAnimationState();
    void ReconcileAutoMapData();
    void RelayQuickChatCommandToAssociates(uint16_t);
    void RemoveAllAssociates();
    void RemoveAssociate(uint32_t);
    void RemoveBadEffects();
    int32_t RemoveCharmEffectsByFactionID(int32_t, int32_t);
    int32_t RemoveCharmEffectsByOBJECTID(uint32_t, int32_t);
    void RemoveCombatInvisibilityEffects();
    void RemoveCounterspeller(uint32_t);
    void RemoveDomination();
    void RemoveDominationEffect();
    void RemoveFromArea(int32_t);
    void RemoveFromAssociateList(uint32_t);
    void RemoveFromInvitationsOffered(uint32_t);
    void RemoveFromPVPList(uint32_t);
    void RemoveFromVisibleList(uint32_t);
    void RemoveGold(int32_t, int32_t);
    int32_t RemoveItem(CNWSItem*, int32_t, int32_t, int32_t, int32_t);
    int32_t RemoveItemFromRepository(CNWSItem*, int32_t);
    CNWSCreRestorePolymorphData* RemovePolymorphFromOutputCreature();
    void RemoveSleepEffects();
    void RemoveSpellActionFromRound();
    void RemoveWoundingEffects();
    int32_t ReplyToInvitation(int32_t, uint32_t);
    void ReprocessAssociateList();
    int32_t RequestBuy(uint32_t, uint32_t, uint32_t);
    int32_t RequestSell(uint32_t, uint32_t);
    void ResetItemPossessor();
    void ResetPCDominatedScripts();
    void ResetUpdateTimes(uint32_t, uint32_t);
    void ResolveAmmunition(uint32_t);
    void ResolveAttack(uint32_t, int32_t, int32_t);
    void ResolveAttackRoll(CNWSObject*);
    void ResolveCachedSpecialAttacks();
    void ResolveDamage(CNWSObject*);
    void ResolveDamageShields(CNWSCreature*);
    void ResolveDeathAttack(CNWSCreature*);
    int32_t ResolveDefensiveEffects(CNWSObject*, int32_t);
    void ResolveElementalDamage(CNWSObject*);
    void ResolveInitiative();
    void ResolveItemCastSpell(CNWSObject*);
    void ResolveMeleeAnimations(int32_t, int32_t, CNWSObject*, int32_t);
    void ResolveMeleeAttack(CNWSObject*, int32_t, int32_t);
    void ResolveMeleeSpecialAttack(int32_t, int32_t, CNWSObject*, int32_t);
    void ResolveOnHitEffect(CNWSObject*, int32_t, int32_t);
    void ResolveOnHitVisuals(CNWSObject*);
    void ResolvePostMeleeDamage(CNWSObject*);
    void ResolvePostRangedDamage(CNWSObject*);
    void ResolveRangedAnimations(CNWSObject*, int32_t);
    void ResolveRangedAttack(CNWSObject*, int32_t, int32_t);
    void ResolveRangedMiss(CNWSObject*);
    void ResolveRangedSpecialAttack(CNWSObject*, int32_t);
    void ResolveSafeProjectile(uint32_t, int32_t);
    void ResolveSituationalModifiers(CNWSObject*);
    void ResolveSneakAttack(CNWSCreature*);
    void Rest(int32_t, int32_t);
    void RestoreCutsceneVars();
    void RestoreItemProperties();
    void RestoreItemPropertiesInRepository(CItemRepository*);
    void RestorePolymorphToOutputCreature(CNWSCreRestorePolymorphData*);
    int32_t RunEquip(uint32_t, uint32_t, uint32_t);
    int32_t RunUnequip(uint32_t, uint32_t, unsigned char, unsigned char, int32_t, uint32_t);
    void SaveAssociateList(CResGFF*, CResStruct*, int32_t);
    void SaveAutoMapData(CResGFF*, CResStruct*);
    int32_t SaveCreature(CResGFF*, CResStruct*, int32_t, int32_t, int32_t, int32_t);
    void SavePersonalReputationList(CResGFF*, CResStruct*);
    void SaveQuickBarHack(CExoString);
    void SaveQuickButtons(CResGFF*, CResStruct*);
    unsigned char SavingThrowRoll(unsigned char, uint16_t, unsigned char, uint32_t, int32_t, uint16_t, int32_t);
    void SawTrapInformAssociates(uint32_t);
    void SendFeedbackMessage(uint16_t, CNWCCMessageData*, CNWSPlayer*);
    void SendFeedbackString(CExoString, CNWSPlayer*);
    void SetActivity(int32_t, int32_t);
    void SetAllTilesExplored(uint32_t, int32_t);
    void SetAnimation(int32_t);
    void SetAssociateListenPatterns();
    void SetAssociatesToForgetAggression(uint32_t);
    void SetAssociateType(uint16_t);
    void SetAutoMapData(int32_t, uint32_t*, unsigned char**);
    void SetBroadcastedAOOTo(int32_t);
    void SetCombatMode(unsigned char, int32_t);
    void SetCombatState(int32_t);
    void SetDefensiveCastingMode(unsigned char);
    void SetDetectMode(unsigned char);
    void SetEffectSpellId(uint32_t);
    void SetExcitedState(unsigned char);
    void SetGold(int32_t);
    void SetId(uint32_t);
    void SetInTransit(int32_t);
    void SetInvitedToParty(int32_t);
    void SetLockOrientationToObject(uint32_t);
    void SetMode(unsigned char, int32_t);
    void SetMovementRateFactor(float);
    void SetPCDominatedScripts();
    void SetPortrait(CResRef);
    void SetPortraitId(uint16_t);
    void SetPVPPlayerLikesMe(uint32_t, int32_t, int32_t);
    void SetQuickbarButton_AssociateCommand(unsigned char, int32_t, uint16_t, uint32_t);
    void SetQuickbarButton_CommandLine(unsigned char, const CExoString&, const CExoString&);
    void SetQuickbarButton_DM_General_ResRefParam(unsigned char, unsigned char, const CResRef&);
    void SetQuickbarButton_DungeonMaster_CreateCreature(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreateEncounter(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreateItem(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreatePlaceable(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreatePortal(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreateTrigger(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_DungeonMaster_CreateWaypoint(unsigned char, const CResRef&, const CExoString&);
    void SetQuickbarButton_GeneralINTParam(unsigned char, unsigned char, int32_t);
    void SetQuickbarButton_GeneralNoParam(unsigned char, unsigned char);
    void SetQuickbarButton_Item(unsigned char, uint32_t, int32_t, uint32_t);
    void SetQuickbarButton_Spell(unsigned char, unsigned char, uint32_t, unsigned char, unsigned char);
    void SetQuickbarButton_SpellLikeAbility(unsigned char, uint32_t, unsigned char);
    void SetStandardFactionReputation(int32_t, int32_t);
    void SetStealthMode(unsigned char);
    void SetTileExplored(uint32_t, int32_t, int32_t, int32_t);
    void SignalMeleeDamage(CNWSObject*, int32_t);
    void SignalRangedDamage(CNWSObject*, int32_t);
    void SpawnInHeartbeatPerception(int32_t);
    void SplitItem(CNWSItem*, int32_t);
    int32_t StartBarter(uint32_t, uint32_t, int32_t);
    void StartGuiTimingBar(uint32_t, unsigned char);
    void StopGuiTimingBar();
    void StoreCutsceneVars();
    void SummonAnimalCompanion();
    void SummonAssociate(CResRef, CExoString, uint16_t);
    void SummonFamiliar();
    void TerminateClientSidePath(int32_t);
    int32_t TestAIStateAsMode(int32_t);
    int32_t ToggleMode(unsigned char);
    int32_t TransferGold(uint32_t, Vector, uint32_t, int32_t, unsigned char, unsigned char);
    int32_t TranslateAddress(uint32_t, int32_t, int32_t, int32_t*, int32_t*);
    int32_t UnequipItem(CNWSItem*, int32_t);
    int32_t UnPolymorph(CGameEffect*);
    void UnpossessCreature();
    void UnpossessCreatureDM();
    void UnpossessFamiliar();
    void UnsummonMyself();
    void UpdateActionQueue();
    void UpdateAppearanceDependantInfo();
    void UpdateAppearanceForEquippedItems();
    void UpdateAttributesOnEffect(CGameEffect*, int32_t);
    void UpdateAutoMap(uint32_t);
    void UpdateCombatRoundTimer();
    void UpdateEffectPtrs();
    void UpdateEncumbranceState(int32_t);
    void UpdateExcitedStateTimer();
    void UpdatePersonalSpace();
    int32_t UpdateSpecialAttacks();
    int32_t UpdateSubareasOnJumpPosition(Vector, uint32_t);
    int32_t UpdateSubareasOnMoveTo(Vector, Vector, int32_t, CExoArrayListTemplatedunsignedlong*, int32_t);
    void UpdateTrapCheck();
    void UpdateTrapCheckDM();
    void UpdateVisibleList();
    int32_t UseFeat(uint16_t, uint16_t, uint32_t, uint32_t, Vector*);
    int32_t UseItem(uint32_t, unsigned char, unsigned char, uint32_t, Vector, uint32_t);
    int32_t UseLoreOnItem(uint32_t);
    int32_t UseSkill(unsigned char, unsigned char, uint32_t, Vector, uint32_t, uint32_t, int32_t);
    void ValidateCounterSpellData(uint32_t, unsigned char, unsigned char);
    uint32_t WalkUpdateLocation();
    int32_t WalkUpdateLocationDistance(float, Vector*, Vector*, CExoArrayListTemplatedunsignedlong*);
    int32_t WalkUpdateLocationTestDistance(Vector, Vector);
};

void CNWSCreature__CNWSCreatureCtor__0(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
void CNWSCreature__CNWSCreatureDtor__0(CNWSCreature* thisPtr);
int32_t CNWSCreature__AcquireItem(CNWSCreature* thisPtr, CNWSItem**, uint32_t, uint32_t, unsigned char, unsigned char, int32_t, int32_t);
void CNWSCreature__ActionManager(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__ActivityManager(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__AddAnimalEmpathyAction(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__AddAppearActions(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__AddAssociate(CNWSCreature* thisPtr, uint32_t, uint16_t);
int32_t CNWSCreature__AddAttackActions(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__AddCastSpellActions(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, int32_t, int32_t, Vector, uint32_t, int32_t, int32_t, int32_t, unsigned char, int32_t, int32_t, int32_t, unsigned char);
int32_t CNWSCreature__AddCounterSpellActions(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__AddDisappearActions(CNWSCreature* thisPtr, int32_t, int32_t);
int32_t CNWSCreature__AddDriveAction(CNWSCreature* thisPtr, uint16_t, const Vector&, int32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__AddDropItemActions(CNWSCreature* thisPtr, uint32_t, Vector, int32_t);
int32_t CNWSCreature__AddEquipItemActions(CNWSCreature* thisPtr, CNWSItem*, uint32_t, int32_t, int32_t, uint32_t);
void CNWSCreature__AddGold(CNWSCreature* thisPtr, int32_t, int32_t);
int32_t CNWSCreature__AddHealActions(CNWSCreature* thisPtr, uint32_t, uint32_t, int32_t);
int32_t CNWSCreature__AddItemCastSpellActions(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, Vector, uint32_t, int32_t);
int32_t CNWSCreature__AddMoveToPointAction(CNWSCreature* thisPtr, uint16_t, Vector, uint32_t, uint32_t, int32_t, float, float, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__AddMoveToPointActionToFront(CNWSCreature* thisPtr, uint16_t, Vector, uint32_t, uint32_t, int32_t, float, float, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__AddPathfindingWaitActionToFront(CNWSCreature* thisPtr, uint16_t);
int32_t CNWSCreature__AddPickPocketActions(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__AddPickUpItemActions(CNWSCreature* thisPtr, uint32_t, uint32_t, unsigned char, unsigned char);
int32_t CNWSCreature__AddRepositoryMoveActions(CNWSCreature* thisPtr, CNWSItem*, uint32_t, unsigned char, unsigned char);
int32_t CNWSCreature__AddSitActions(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__AddTauntActions(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__AddToArea(CNWSCreature* thisPtr, CNWSArea*, float, float, float, int32_t);
void CNWSCreature__AddToAssociateList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__AddToInvitationsIgnored(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__AddToInvitationsOffered(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__AddToPersonalReputationList(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, float);
void CNWSCreature__AddToPVPList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__AddToVisibleList(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, unsigned char, int32_t);
int32_t CNWSCreature__AddTrapActions(CNWSCreature* thisPtr, uint32_t, unsigned char, uint32_t, Vector, uint32_t);
int32_t CNWSCreature__AddUnequipActions(CNWSCreature* thisPtr, CNWSItem*, uint32_t, unsigned char, unsigned char, int32_t, int32_t, uint32_t);
int32_t CNWSCreature__AddUseTalentAtLocationActions(CNWSCreature* thisPtr, int32_t, int32_t, Vector, unsigned char, uint32_t, int32_t, unsigned char, unsigned char);
int32_t CNWSCreature__AddUseTalentOnObjectActions(CNWSCreature* thisPtr, int32_t, int32_t, uint32_t, unsigned char, uint32_t, int32_t, unsigned char, unsigned char);
void CNWSCreature__AdjustReputation(CNWSCreature* thisPtr, int32_t, int32_t);
uint32_t CNWSCreature__AIActionAnimalEmpathy(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionAppear(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionAreaWait(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionAttackObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionBarter(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCastSpell(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionChangeFacingObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionChangeFacingPoint(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckForceFollowObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckInterAreaPathfinding(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveAwayFromLocation(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveAwayFromObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveToObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveToObjectRadius(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveToPoint(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCheckMoveToPointRadius(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionCounterSpell(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionDisappear(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionDisarmTrap(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionDrive(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionDropItem(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionEncounterCreatureDestroySelf(CNWSCreature* thisPtr);
uint32_t CNWSCreature__AIActionEquipItem(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionExamine(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionExamineTrap(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionFlagTrap(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionForceFollowObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionHeal(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionItemCastSpell(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionJumpToObject(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionJumpToPoint(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionMoveToPoint(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionOrientCamera(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionPickPocket(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionPickUpItem(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionRandomWalk(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionRecoverTrap(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionRepositoryMove(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionRest(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionSetTrap(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionSit(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionTaunt(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionUnequipItem(CNWSCreature* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSCreature__AIActionWaitForEndOfRound(CNWSCreature* thisPtr, CNWSObjectActionNode*);
void CNWSCreature__AIUpdate(CNWSCreature* thisPtr);
void CNWSCreature__ApplyDeathExperience(CNWSCreature* thisPtr);
int32_t CNWSCreature__ApplyDiseasePayload(CNWSCreature* thisPtr, CGameEffect*, uint32_t, uint32_t);
void CNWSCreature__ApplyOnHitAbilityDamage(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitBlindness(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitCastSpell(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*, CNWSItem*);
void CNWSCreature__ApplyOnHitConfusion(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitDaze(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitDeafness(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitDeathAttack(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitDisease(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitDispelMagic__0(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitDispelMagic__1(CNWSCreature* thisPtr, CNWSObject*, uint32_t);
void CNWSCreature__ApplyOnHitDominate(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitDoom(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitFear(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitGreaterDispel(CNWSCreature* thisPtr, CNWSObject*, uint32_t);
void CNWSCreature__ApplyOnHitHold(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitKnock(CNWSCreature* thisPtr, CNWSObject*, uint32_t);
void CNWSCreature__ApplyOnHitLesserDispel(CNWSCreature* thisPtr, CNWSObject*, uint32_t);
void CNWSCreature__ApplyOnHitLevelDrain(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitMordysDisjunction(CNWSCreature* thisPtr, CNWSObject*, uint32_t);
void CNWSCreature__ApplyOnHitPoison(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitSilence(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitSlayAlignment(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitSlayAlignmentGroup(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitSlayRacialGroup(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitSleep(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitSlow(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitStun(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ApplyOnHitVampiricRegeneration(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitVorpal(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
void CNWSCreature__ApplyOnHitWounding(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
int32_t CNWSCreature__ApplyPoisonPayload(CNWSCreature* thisPtr, CGameEffect*, uint32_t, uint32_t);
int32_t CNWSCreature__ApplyWounding(CNWSCreature* thisPtr, CGameEffect*);
CNWSCreature* CNWSCreature__AsNWSCreature(CNWSCreature* thisPtr);
void CNWSCreature__AutoCloseGUIPanels(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__BringAssociatesToNewFaction(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__BroadcastAssociateCommand(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__BroadcastAttackDataToParty(CNWSCreature* thisPtr, CNWCCMessageData*, CNWSCombatAttackData*, CNWSCreature*);
void CNWSCreature__BroadcastAttackOfOpportunity(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__BroadcastBattleCry(CNWSCreature* thisPtr);
void CNWSCreature__BroadcastCombatStateToParty(CNWSCreature* thisPtr);
void CNWSCreature__BroadcastDamageDataToParty(CNWSCreature* thisPtr, CNWCCMessageData*, CNWSCreature*);
void CNWSCreature__BroadcastDeathDataToParty(CNWSCreature* thisPtr, CNWCCMessageData*, CNWSCreature*);
void CNWSCreature__BroadcastFloatyData(CNWSCreature* thisPtr, CNWCCMessageData*);
void CNWSCreature__BroadcastSavingThrowData(CNWSCreature* thisPtr, CNWCCMessageData*);
void CNWSCreature__BroadcastSkillData(CNWSCreature* thisPtr, CNWCCMessageData*);
void CNWSCreature__BroadcastSpellCast(CNWSCreature* thisPtr, uint32_t, unsigned char, uint16_t);
void CNWSCreature__BroadcastVoiceChat(CNWSCreature* thisPtr, unsigned char);
void CNWSCreature__BroadcastWhirlwindAttack(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__BumpFriends(CNWSCreature* thisPtr, CNWSCreature*, const Vector&, const Vector&);
unsigned char CNWSCreature__CalculateDamagePower(CNWSCreature* thisPtr, CNWSObject*, int32_t);
float CNWSCreature__CalculateDeathExperience(CNWSCreature* thisPtr, int32_t, int32_t);
int32_t CNWSCreature__CalculateMaxElementalDamage(CNWSCreature* thisPtr, CNWSObject*, int32_t);
int32_t CNWSCreature__CalculatePersonalReputationAdjustment(CNWSCreature* thisPtr, uint32_t);
uint32_t CNWSCreature__CalculateProjectileTimeToTarget(CNWSCreature* thisPtr, Vector, int32_t);
int32_t CNWSCreature__CalculateSpellSaveDC(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__CancelAction(CNWSCreature* thisPtr, uint16_t, uint16_t);
void CNWSCreature__CancelGoldTransfer(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__CancelRest(CNWSCreature* thisPtr, uint16_t);
unsigned char CNWSCreature__CanEquipItem(CNWSCreature* thisPtr, CNWSItem*, uint32_t*, int32_t, int32_t, int32_t, CNWSPlayer*);
unsigned char CNWSCreature__CanEquipMiscellaneous(CNWSCreature* thisPtr, CNWSItem*, uint32_t*, int32_t, int32_t);
unsigned char CNWSCreature__CanEquipShield(CNWSCreature* thisPtr, CNWSItem*, int32_t, int32_t);
unsigned char CNWSCreature__CanEquipWeapon(CNWSCreature* thisPtr, CNWSItem*, uint32_t*, int32_t, int32_t, CNWSPlayer*);
unsigned char CNWSCreature__CanUnEquipWeapon(CNWSCreature* thisPtr, CNWSItem*);
int32_t CNWSCreature__CanUseItem(CNWSCreature* thisPtr, CNWSItem*, int32_t);
void CNWSCreature__CheckInventoryForPlotItems(CNWSCreature* thisPtr);
int32_t CNWSCreature__CheckItemAlignmentRestrictions(CNWSCreature* thisPtr, CNWSItem*);
int32_t CNWSCreature__CheckItemClassRestrictions(CNWSCreature* thisPtr, CNWSItem*);
int32_t CNWSCreature__CheckItemRaceRestrictions(CNWSCreature* thisPtr, CNWSItem*);
void CNWSCreature__CheckMasterIsValid(CNWSCreature* thisPtr, uint32_t, uint32_t);
int32_t CNWSCreature__CheckProficiencies(CNWSCreature* thisPtr, CNWSItem*, uint32_t);
int32_t CNWSCreature__CheckUseMagicDeviceSkill(CNWSCreature* thisPtr, CNWSItem*, int32_t);
int32_t CNWSCreature__CheckVisibleList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__CleanInvitationLists(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__CleanOutPersonalReputationList(CNWSCreature* thisPtr);
int32_t CNWSCreature__ClearAction(CNWSCreature* thisPtr, CNWSObjectActionNode*, int32_t);
void CNWSCreature__ClearActivities(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__ClearAutoMapData(CNWSCreature* thisPtr);
void CNWSCreature__ClearHostileActionsVersus(CNWSCreature* thisPtr, CNWSCreature*);
void CNWSCreature__ClearPersonalReputation(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__ClearVisibleList(CNWSCreature* thisPtr);
void CNWSCreature__ComputeAIState(CNWSCreature* thisPtr);
void CNWSCreature__ComputeAIStateOnAction(CNWSCreature* thisPtr, int32_t, uint32_t);
void CNWSCreature__ComputeArmourClass(CNWSCreature* thisPtr, CNWSItem*, int32_t, int32_t);
void CNWSCreature__ComputeModifiedMovementRate(CNWSCreature* thisPtr);
float CNWSCreature__ComputeSpellRange(CNWSCreature* thisPtr, CExoString, uint32_t);
int32_t CNWSCreature__ComputeTotalEquippedWeight(CNWSCreature* thisPtr);
float CNWSCreature__ComputeTotalWalkDistance(CNWSCreature* thisPtr);
int32_t CNWSCreature__ComputeTotalWeightCarried(CNWSCreature* thisPtr);
void CNWSCreature__ConvertModeToggleQuickButton(CNWSCreature* thisPtr, CNWSQuickbarButton*);
void CNWSCreature__CopyQuickButtonsFromDM(CNWSCreature* thisPtr, CNWSPlayer*);
void CNWSCreature__CreateDefaultQuickButtons(CNWSCreature* thisPtr);
void CNWSCreature__CreateDefaultQuickButtons_AddFeat(CNWSCreature* thisPtr, unsigned char&, uint16_t, int32_t);
void CNWSCreature__CreateDefaultQuickButtons_CheckItem(CNWSCreature* thisPtr, CNWSItem*, uint32_t&, uint32_t&, uint32_t&, uint32_t&);
void CNWSCreature__CreateDefaultQuickButtonsDM(CNWSCreature* thisPtr);
void CNWSCreature__CutWaypointPath(CNWSCreature* thisPtr);
int32_t CNWSCreature__DecrementSpellReadyCount(CNWSCreature* thisPtr, uint32_t, unsigned char, unsigned char, unsigned char, unsigned char);
float CNWSCreature__DesiredAttackRange(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__DestroyEquippedItems(CNWSCreature* thisPtr);
void CNWSCreature__DisplayFloatyDataToSelf(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__DMClearScripts(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__DMResetClearedScripts(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__DoCombatStep(CNWSCreature* thisPtr, unsigned char, int32_t, uint32_t);
void CNWSCreature__DoDamage(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__DoListenDetection(CNWSCreature* thisPtr, CNWSCreature*, int32_t);
void CNWSCreature__DoPerceptionUpdateOnCreature(CNWSCreature* thisPtr, CNWSCreature*, int32_t);
int32_t CNWSCreature__DoSpotDetection(CNWSCreature* thisPtr, CNWSCreature*, int32_t);
int32_t CNWSCreature__DoStealthDetection(CNWSCreature* thisPtr, CNWSCreature*, int32_t, int32_t*, int32_t*, int32_t);
uint32_t CNWSCreature__DriveUpdateLocation(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__DumpToLog(CNWSCreature* thisPtr);
int32_t CNWSCreature__EquipItem(CNWSCreature* thisPtr, uint32_t, CNWSItem*, int32_t, int32_t);
int32_t CNWSCreature__EquipMostDamagingAmmunition(CNWSCreature* thisPtr, uint32_t, CNWSItem*);
int32_t CNWSCreature__EquipMostDamagingMeleeWeapon(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
int32_t CNWSCreature__EquipMostDamagingRangedWeapon(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__EquipMostEffectiveArmor(CNWSCreature* thisPtr);
int32_t CNWSCreature__EvaluateLock(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__EventHandler(CNWSCreature* thisPtr, uint32_t, uint32_t, void*, uint32_t, uint32_t);
void CNWSCreature__ExternalResolveAttack(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__FailedOpenInformAssociates(CNWSCreature* thisPtr);
int32_t CNWSCreature__ForceMoveToPoint(CNWSCreature* thisPtr, CNWSForcedAction*);
int32_t CNWSCreature__GetActivity(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__GetAmmunitionAvailable(CNWSCreature* thisPtr, int32_t);
int16_t CNWSCreature__GetArmorClass(CNWSCreature* thisPtr);
uint32_t CNWSCreature__GetAssociateId(CNWSCreature* thisPtr, uint16_t, int32_t);
int32_t CNWSCreature__GetAttackResultHit(CNWSCreature* thisPtr, CNWSCombatAttackData*);
CNWSBarter* CNWSCreature__GetBarterInfo(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__GetBlind(CNWSCreature* thisPtr);
uint16_t CNWSCreature__GetBodyBagAppearance(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetCanSlayAlignment(CNWSCreature* thisPtr, CNWSObject*, CNWItemProperty*);
int32_t CNWSCreature__GetCreatureReputation(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
uint16_t CNWSCreature__GetDamageFlags(CNWSCreature* thisPtr);
unsigned char CNWSCreature__GetDetectMode(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetDialogInterruptable(CNWSCreature* thisPtr);
CResRef CNWSCreature__GetDialogResref(CNWSCreature* thisPtr);
uint32_t CNWSCreature__GetDominatedCreatureId(CNWSCreature* thisPtr);
uint32_t CNWSCreature__GetEffectSpellId(CNWSCreature* thisPtr);
CNWSFaction* CNWSCreature__GetFaction(CNWSCreature* thisPtr);
CExoArrayListTemplatedCGameEffectPtr CNWSCreature__GetFilteredEffectList(CNWSCreature* thisPtr, unsigned char);
CExoLocString& CNWSCreature__GetFirstName(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetFlanked(CNWSCreature* thisPtr, CNWSCreature*);
int32_t CNWSCreature__GetFlatFooted(CNWSCreature* thisPtr);
unsigned char CNWSCreature__GetGender(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetHasInvisbilityEffectApplied(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetHenchmanIndex(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__GetInvisible(CNWSCreature* thisPtr, CNWSObject*, int32_t);
int32_t CNWSCreature__GetIsAbleToPossessFamiliar(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetIsCreatureBumpable(CNWSCreature* thisPtr, CNWSCreature*);
int32_t CNWSCreature__GetIsInInvitationsIgnored(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__GetIsInInvitationsOffered(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__GetIsInMelee(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetIsInUseRange(CNWSCreature* thisPtr, uint32_t, float, int32_t);
int32_t CNWSCreature__GetIsPossessedFamiliar(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetIsWeaponEffective(CNWSCreature* thisPtr, uint32_t, int32_t);
uint32_t CNWSCreature__GetItemCount(CNWSCreature* thisPtr, int32_t);
CNWSJournal* CNWSCreature__GetJournal(CNWSCreature* thisPtr);
CExoLocString& CNWSCreature__GetLastName(CNWSCreature* thisPtr);
float CNWSCreature__GetListenCheckDistance(CNWSCreature* thisPtr);
uint32_t CNWSCreature__GetLockOrientationToObject(CNWSCreature* thisPtr);
int16_t CNWSCreature__GetMaxHitPoints(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__GetMode(CNWSCreature* thisPtr, unsigned char);
float CNWSCreature__GetMovementRateFactor(CNWSCreature* thisPtr);
uint32_t CNWSCreature__GetNearestEnemy(CNWSCreature* thisPtr, float, uint32_t, int32_t, int32_t);
int32_t CNWSCreature__GetNumAssociatesOfType(CNWSCreature* thisPtr, uint16_t);
int32_t CNWSCreature__GetNumCounterSpellingCreatures(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__GetNumInvited(CNWSCreature* thisPtr);
CResRef CNWSCreature__GetPortrait(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetPVPPlayerLikesMe(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__GetPVPReputation(CNWSCreature* thisPtr, uint32_t);
CNWSQuickbarButton* CNWSCreature__GetQuickbarButton(CNWSCreature* thisPtr, unsigned char);
int32_t CNWSCreature__GetRangeWeaponEquipped(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetRelativeWeaponSize(CNWSCreature* thisPtr, CNWSItem*);
float CNWSCreature__GetRunRate(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetSpellOrHealActionQueued(CNWSCreature* thisPtr);
float CNWSCreature__GetSpotCheckDistance(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetStandardFactionReputation(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__GetTileExplored(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
int32_t CNWSCreature__GetTotalEffectBonus(CNWSCreature* thisPtr, unsigned char, CNWSObject*, int32_t, int32_t, unsigned char, unsigned char, unsigned char, unsigned char, int32_t);
int32_t CNWSCreature__GetTurnResistanceHD(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetUnarmed(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetUseMonkAbilities(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetUseRange(CNWSCreature* thisPtr, uint32_t, Vector&, float&);
CNWVisibilityNode* CNWSCreature__GetVisibleListElement(CNWSCreature* thisPtr, uint32_t);
float CNWSCreature__GetWalkRate(CNWSCreature* thisPtr);
int32_t CNWSCreature__GetWeaponPower(CNWSCreature* thisPtr, CNWSObject*, int32_t);
int32_t CNWSCreature__HandleSubAreaStateChanges(CNWSCreature* thisPtr, CExoArrayListTemplatedunsignedlong*, CExoArrayListTemplatedunsignedlong*, int32_t);
void CNWSCreature__InitialisePVPList(CNWSCreature* thisPtr);
void CNWSCreature__InitializeQuickbar(CNWSCreature* thisPtr);
int32_t CNWSCreature__LearnScroll(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__LoadAssociateList(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
void CNWSCreature__LoadAutoMapData(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
int32_t CNWSCreature__LoadCreature(CNWSCreature* thisPtr, CResGFF*, CResStruct*, int32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__LoadFromTemplate(CNWSCreature* thisPtr, CResRef, CExoString*);
void CNWSCreature__LoadPersonalReputationList(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
int32_t CNWSCreature__LoadPolymorphData(CNWSCreature* thisPtr, CResGFF*, CResStruct*, int32_t);
void CNWSCreature__LoadQuickBarHack(CNWSCreature* thisPtr, CExoString);
void CNWSCreature__LoadQuickButtons(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
float CNWSCreature__MaxAttackRange(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
void CNWSCreature__MergeItem(CNWSCreature* thisPtr, CNWSItem*, CNWSItem*);
void CNWSCreature__NotifyAssociateActionToggle(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__PacifyCreature__0(CNWSCreature* thisPtr);
void CNWSCreature__PacifyCreature__1(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__PayToIdentifyItem(CNWSCreature* thisPtr, uint32_t, uint32_t);
int32_t CNWSCreature__Polymorph(CNWSCreature* thisPtr, int32_t, CGameEffect*, int32_t);
void CNWSCreature__PossessCreature(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__PossessCreatureDM(CNWSCreature* thisPtr, uint32_t, unsigned char);
void CNWSCreature__PossessFamiliar(CNWSCreature* thisPtr);
void CNWSCreature__PostProcess(CNWSCreature* thisPtr);
void CNWSCreature__ProcessMasterDeathForAssociates(CNWSCreature* thisPtr);
void CNWSCreature__ProcessPendingCombatActions(CNWSCreature* thisPtr);
void CNWSCreature__QuickbarButton_RemoveItem(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__QuickbarButton_RemoveSpell(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__ReadItemsFromGff(CNWSCreature* thisPtr, CResGFF*, CResStruct*, int32_t, int32_t);
void CNWSCreature__ReadScriptsFromGff(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
void CNWSCreature__RealizeAssociateList(CNWSCreature* thisPtr);
void CNWSCreature__ReceiveAssociateCommand(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__RecomputeAmbientAnimationState(CNWSCreature* thisPtr);
void CNWSCreature__ReconcileAutoMapData(CNWSCreature* thisPtr);
void CNWSCreature__RelayQuickChatCommandToAssociates(CNWSCreature* thisPtr, uint16_t);
void CNWSCreature__RemoveAllAssociates(CNWSCreature* thisPtr);
void CNWSCreature__RemoveAssociate(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveBadEffects(CNWSCreature* thisPtr);
int32_t CNWSCreature__RemoveCharmEffectsByFactionID(CNWSCreature* thisPtr, int32_t, int32_t);
int32_t CNWSCreature__RemoveCharmEffectsByOBJECTID(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__RemoveCombatInvisibilityEffects(CNWSCreature* thisPtr);
void CNWSCreature__RemoveCounterspeller(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveDomination(CNWSCreature* thisPtr);
void CNWSCreature__RemoveDominationEffect(CNWSCreature* thisPtr);
void CNWSCreature__RemoveFromArea(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__RemoveFromAssociateList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveFromInvitationsOffered(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveFromPVPList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveFromVisibleList(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__RemoveGold(CNWSCreature* thisPtr, int32_t, int32_t);
int32_t CNWSCreature__RemoveItem(CNWSCreature* thisPtr, CNWSItem*, int32_t, int32_t, int32_t, int32_t);
int32_t CNWSCreature__RemoveItemFromRepository(CNWSCreature* thisPtr, CNWSItem*, int32_t);
CNWSCreRestorePolymorphData* CNWSCreature__RemovePolymorphFromOutputCreature(CNWSCreature* thisPtr);
void CNWSCreature__RemoveSleepEffects(CNWSCreature* thisPtr);
void CNWSCreature__RemoveSpellActionFromRound(CNWSCreature* thisPtr);
void CNWSCreature__RemoveWoundingEffects(CNWSCreature* thisPtr);
int32_t CNWSCreature__ReplyToInvitation(CNWSCreature* thisPtr, int32_t, uint32_t);
void CNWSCreature__ReprocessAssociateList(CNWSCreature* thisPtr);
int32_t CNWSCreature__RequestBuy(CNWSCreature* thisPtr, uint32_t, uint32_t, uint32_t);
int32_t CNWSCreature__RequestSell(CNWSCreature* thisPtr, uint32_t, uint32_t);
void CNWSCreature__ResetItemPossessor(CNWSCreature* thisPtr);
void CNWSCreature__ResetPCDominatedScripts(CNWSCreature* thisPtr);
void CNWSCreature__ResetUpdateTimes(CNWSCreature* thisPtr, uint32_t, uint32_t);
void CNWSCreature__ResolveAmmunition(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__ResolveAttack(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
void CNWSCreature__ResolveAttackRoll(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveCachedSpecialAttacks(CNWSCreature* thisPtr);
void CNWSCreature__ResolveDamage(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveDamageShields(CNWSCreature* thisPtr, CNWSCreature*);
void CNWSCreature__ResolveDeathAttack(CNWSCreature* thisPtr, CNWSCreature*);
int32_t CNWSCreature__ResolveDefensiveEffects(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ResolveElementalDamage(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveInitiative(CNWSCreature* thisPtr);
void CNWSCreature__ResolveItemCastSpell(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveMeleeAnimations(CNWSCreature* thisPtr, int32_t, int32_t, CNWSObject*, int32_t);
void CNWSCreature__ResolveMeleeAttack(CNWSCreature* thisPtr, CNWSObject*, int32_t, int32_t);
void CNWSCreature__ResolveMeleeSpecialAttack(CNWSCreature* thisPtr, int32_t, int32_t, CNWSObject*, int32_t);
void CNWSCreature__ResolveOnHitEffect(CNWSCreature* thisPtr, CNWSObject*, int32_t, int32_t);
void CNWSCreature__ResolveOnHitVisuals(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolvePostMeleeDamage(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolvePostRangedDamage(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveRangedAnimations(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ResolveRangedAttack(CNWSCreature* thisPtr, CNWSObject*, int32_t, int32_t);
void CNWSCreature__ResolveRangedMiss(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveRangedSpecialAttack(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__ResolveSafeProjectile(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__ResolveSituationalModifiers(CNWSCreature* thisPtr, CNWSObject*);
void CNWSCreature__ResolveSneakAttack(CNWSCreature* thisPtr, CNWSCreature*);
void CNWSCreature__Rest(CNWSCreature* thisPtr, int32_t, int32_t);
void CNWSCreature__RestoreCutsceneVars(CNWSCreature* thisPtr);
void CNWSCreature__RestoreItemProperties(CNWSCreature* thisPtr);
void CNWSCreature__RestoreItemPropertiesInRepository(CNWSCreature* thisPtr, CItemRepository*);
void CNWSCreature__RestorePolymorphToOutputCreature(CNWSCreature* thisPtr, CNWSCreRestorePolymorphData*);
int32_t CNWSCreature__RunEquip(CNWSCreature* thisPtr, uint32_t, uint32_t, uint32_t);
int32_t CNWSCreature__RunUnequip(CNWSCreature* thisPtr, uint32_t, uint32_t, unsigned char, unsigned char, int32_t, uint32_t);
void CNWSCreature__SaveAssociateList(CNWSCreature* thisPtr, CResGFF*, CResStruct*, int32_t);
void CNWSCreature__SaveAutoMapData(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
int32_t CNWSCreature__SaveCreature(CNWSCreature* thisPtr, CResGFF*, CResStruct*, int32_t, int32_t, int32_t, int32_t);
void CNWSCreature__SavePersonalReputationList(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
void CNWSCreature__SaveQuickBarHack(CNWSCreature* thisPtr, CExoString);
void CNWSCreature__SaveQuickButtons(CNWSCreature* thisPtr, CResGFF*, CResStruct*);
unsigned char CNWSCreature__SavingThrowRoll(CNWSCreature* thisPtr, unsigned char, uint16_t, unsigned char, uint32_t, int32_t, uint16_t, int32_t);
void CNWSCreature__SawTrapInformAssociates(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__SendFeedbackMessage(CNWSCreature* thisPtr, uint16_t, CNWCCMessageData*, CNWSPlayer*);
void CNWSCreature__SendFeedbackString(CNWSCreature* thisPtr, CExoString, CNWSPlayer*);
void CNWSCreature__SetActivity(CNWSCreature* thisPtr, int32_t, int32_t);
void CNWSCreature__SetAllTilesExplored(CNWSCreature* thisPtr, uint32_t, int32_t);
void CNWSCreature__SetAnimation(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetAssociateListenPatterns(CNWSCreature* thisPtr);
void CNWSCreature__SetAssociatesToForgetAggression(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__SetAssociateType(CNWSCreature* thisPtr, uint16_t);
void CNWSCreature__SetAutoMapData(CNWSCreature* thisPtr, int32_t, uint32_t*, unsigned char**);
void CNWSCreature__SetBroadcastedAOOTo(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetCombatMode(CNWSCreature* thisPtr, unsigned char, int32_t);
void CNWSCreature__SetCombatState(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetDefensiveCastingMode(CNWSCreature* thisPtr, unsigned char);
void CNWSCreature__SetDetectMode(CNWSCreature* thisPtr, unsigned char);
void CNWSCreature__SetEffectSpellId(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__SetExcitedState(CNWSCreature* thisPtr, unsigned char);
void CNWSCreature__SetGold(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetId(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__SetInTransit(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetInvitedToParty(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SetLockOrientationToObject(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__SetMode(CNWSCreature* thisPtr, unsigned char, int32_t);
void CNWSCreature__SetMovementRateFactor(CNWSCreature* thisPtr, float);
void CNWSCreature__SetPCDominatedScripts(CNWSCreature* thisPtr);
void CNWSCreature__SetPortrait(CNWSCreature* thisPtr, CResRef);
void CNWSCreature__SetPortraitId(CNWSCreature* thisPtr, uint16_t);
void CNWSCreature__SetPVPPlayerLikesMe(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t);
void CNWSCreature__SetQuickbarButton_AssociateCommand(CNWSCreature* thisPtr, unsigned char, int32_t, uint16_t, uint32_t);
void CNWSCreature__SetQuickbarButton_CommandLine(CNWSCreature* thisPtr, unsigned char, const CExoString&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DM_General_ResRefParam(CNWSCreature* thisPtr, unsigned char, unsigned char, const CResRef&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreateCreature(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreateEncounter(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreateItem(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreatePlaceable(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreatePortal(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreateTrigger(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_DungeonMaster_CreateWaypoint(CNWSCreature* thisPtr, unsigned char, const CResRef&, const CExoString&);
void CNWSCreature__SetQuickbarButton_GeneralINTParam(CNWSCreature* thisPtr, unsigned char, unsigned char, int32_t);
void CNWSCreature__SetQuickbarButton_GeneralNoParam(CNWSCreature* thisPtr, unsigned char, unsigned char);
void CNWSCreature__SetQuickbarButton_Item(CNWSCreature* thisPtr, unsigned char, uint32_t, int32_t, uint32_t);
void CNWSCreature__SetQuickbarButton_Spell(CNWSCreature* thisPtr, unsigned char, unsigned char, uint32_t, unsigned char, unsigned char);
void CNWSCreature__SetQuickbarButton_SpellLikeAbility(CNWSCreature* thisPtr, unsigned char, uint32_t, unsigned char);
void CNWSCreature__SetStandardFactionReputation(CNWSCreature* thisPtr, int32_t, int32_t);
void CNWSCreature__SetStealthMode(CNWSCreature* thisPtr, unsigned char);
void CNWSCreature__SetTileExplored(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, int32_t);
void CNWSCreature__SignalMeleeDamage(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__SignalRangedDamage(CNWSCreature* thisPtr, CNWSObject*, int32_t);
void CNWSCreature__SpawnInHeartbeatPerception(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__SplitItem(CNWSCreature* thisPtr, CNWSItem*, int32_t);
int32_t CNWSCreature__StartBarter(CNWSCreature* thisPtr, uint32_t, uint32_t, int32_t);
void CNWSCreature__StartGuiTimingBar(CNWSCreature* thisPtr, uint32_t, unsigned char);
void CNWSCreature__StopGuiTimingBar(CNWSCreature* thisPtr);
void CNWSCreature__StoreCutsceneVars(CNWSCreature* thisPtr);
void CNWSCreature__SummonAnimalCompanion(CNWSCreature* thisPtr);
void CNWSCreature__SummonAssociate(CNWSCreature* thisPtr, CResRef, CExoString, uint16_t);
void CNWSCreature__SummonFamiliar(CNWSCreature* thisPtr);
void CNWSCreature__TerminateClientSidePath(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__TestAIStateAsMode(CNWSCreature* thisPtr, int32_t);
int32_t CNWSCreature__ToggleMode(CNWSCreature* thisPtr, unsigned char);
int32_t CNWSCreature__TransferGold(CNWSCreature* thisPtr, uint32_t, Vector, uint32_t, int32_t, unsigned char, unsigned char);
int32_t CNWSCreature__TranslateAddress(CNWSCreature* thisPtr, uint32_t, int32_t, int32_t, int32_t*, int32_t*);
int32_t CNWSCreature__UnequipItem(CNWSCreature* thisPtr, CNWSItem*, int32_t);
int32_t CNWSCreature__UnPolymorph(CNWSCreature* thisPtr, CGameEffect*);
void CNWSCreature__UnpossessCreature(CNWSCreature* thisPtr);
void CNWSCreature__UnpossessCreatureDM(CNWSCreature* thisPtr);
void CNWSCreature__UnpossessFamiliar(CNWSCreature* thisPtr);
void CNWSCreature__UnsummonMyself(CNWSCreature* thisPtr);
void CNWSCreature__UpdateActionQueue(CNWSCreature* thisPtr);
void CNWSCreature__UpdateAppearanceDependantInfo(CNWSCreature* thisPtr);
void CNWSCreature__UpdateAppearanceForEquippedItems(CNWSCreature* thisPtr);
void CNWSCreature__UpdateAttributesOnEffect(CNWSCreature* thisPtr, CGameEffect*, int32_t);
void CNWSCreature__UpdateAutoMap(CNWSCreature* thisPtr, uint32_t);
void CNWSCreature__UpdateCombatRoundTimer(CNWSCreature* thisPtr);
void CNWSCreature__UpdateEffectPtrs(CNWSCreature* thisPtr);
void CNWSCreature__UpdateEncumbranceState(CNWSCreature* thisPtr, int32_t);
void CNWSCreature__UpdateExcitedStateTimer(CNWSCreature* thisPtr);
void CNWSCreature__UpdatePersonalSpace(CNWSCreature* thisPtr);
int32_t CNWSCreature__UpdateSpecialAttacks(CNWSCreature* thisPtr);
int32_t CNWSCreature__UpdateSubareasOnJumpPosition(CNWSCreature* thisPtr, Vector, uint32_t);
int32_t CNWSCreature__UpdateSubareasOnMoveTo(CNWSCreature* thisPtr, Vector, Vector, int32_t, CExoArrayListTemplatedunsignedlong*, int32_t);
void CNWSCreature__UpdateTrapCheck(CNWSCreature* thisPtr);
void CNWSCreature__UpdateTrapCheckDM(CNWSCreature* thisPtr);
void CNWSCreature__UpdateVisibleList(CNWSCreature* thisPtr);
int32_t CNWSCreature__UseFeat(CNWSCreature* thisPtr, uint16_t, uint16_t, uint32_t, uint32_t, Vector*);
int32_t CNWSCreature__UseItem(CNWSCreature* thisPtr, uint32_t, unsigned char, unsigned char, uint32_t, Vector, uint32_t);
int32_t CNWSCreature__UseLoreOnItem(CNWSCreature* thisPtr, uint32_t);
int32_t CNWSCreature__UseSkill(CNWSCreature* thisPtr, unsigned char, unsigned char, uint32_t, Vector, uint32_t, uint32_t, int32_t);
void CNWSCreature__ValidateCounterSpellData(CNWSCreature* thisPtr, uint32_t, unsigned char, unsigned char);
uint32_t CNWSCreature__WalkUpdateLocation(CNWSCreature* thisPtr);
int32_t CNWSCreature__WalkUpdateLocationDistance(CNWSCreature* thisPtr, float, Vector*, Vector*, CExoArrayListTemplatedunsignedlong*);
int32_t CNWSCreature__WalkUpdateLocationTestDistance(CNWSCreature* thisPtr, Vector, Vector);

}

}
