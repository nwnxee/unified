name: Binaries

on: [push, pull_request]

env:
  BUILD_TYPE: RelWithDebInfo
  CCACHE_BASEDIR: $ENV{GITHUB_WORKSPACE}
  CCACHE_DIR: $ENV{GITHUB_WORKSPACE}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVE: 6
  CCACHE_MAXSIZE: 400M

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time

    - name: Cache Additional Dependencies
      uses: actions/cache@v2
      id: dependencies-cache
      with:
        path: "~/dependencies"
        key: dependencies-2

    - name: Install Cache Additional Dependencies
      env:
        CACHE_HIT: ${{steps.dependencies-cache.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          sudo cp --force --recursive ~/dependencies/* /
        else
          sudo apt-get install libhunspell-dev libluajit-5.1-dev ccache
          mkdir -p ~/dependencies
          for dep in libhunspell-dev libluajit-5.1-dev; do
              dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies/
          done
        fi

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: .ccache
        key: gcc-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          gcc-ccache-

    - name: Create Build Environment
      run: sudo /usr/sbin/update-ccache-symlinks && export PATH="/usr/lib/ccache:$PATH" && cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -- -j 4

    - name: Drop timestamp into Binaries folder
      working-directory: ${{runner.workspace}}/unified/Binaries
      run: echo "${{ steps.current-time.outputs.readableTime }}" > ${{ steps.vars.outputs.sha_short }}.txt

    - name: Pack the Binaries
      working-directory: ${{runner.workspace}}/unified/Binaries
      run: cmake -E tar cfv ../NWNX-EE.zip --format=zip .

    - name: Pack the Scripts
      working-directory: ${{runner.workspace}}/unified
      shell: bash
      run: zip -j ./NWScript.zip `find . -name "*.nss" | grep -Pv '_t+[0-9]{0,1}.nss'`

    - name: Upload Binaries
      uses: actions/upload-artifact@v1
      with:
       path: ./NWNX-EE.zip
       name: NWNX-EE.zip

    - name: Upload Scripts
      uses: actions/upload-artifact@v1
      with:
        path: ./NWScript.zip
        name: NWScript.zip

    - name: Deploy Latest Development Build
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: "Development Build"
        files: |
           ./NWNX-EE.zip
           ./NWScript.zip

  docker:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile-gha
          push: true
          tags: plenarius/unified:${{ steps.vars.outputs.sha_short }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  release:
    if: contains(github.ref, 'tags/build')
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/build')
    runs-on: ubuntu-20.04
    needs: release

    steps:
    - name: Download Binaries
      uses: actions/download-artifact@v1
      with:
        name: NWNX-EE.zip
        path: ./

    - name: Download Scripts
      uses: actions/download-artifact@v1
      with:
        name: NWScript.zip
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload Binaries to Release
      id: upload_binaries_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./NWNX-EE.zip
        asset_name: NWNX-EE.zip
        asset_content_type: application/zip

    - name: Upload Scripts to Release
      id: upload_scripts_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./NWScript.zip
        asset_name: NWScript.zip
        asset_content_type: application/zip