name: CMake

on: [push]

env:
  BUILD_TYPE: RelWithDebInfo
  CC: gcc-7 -m64
  CXX: g++-7 -m64

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu GCC 7",
            binaries: "NWNX-EE.zip",
            scripts: "NWScript.zip",
            os: ubuntu-20.04,
          }

    steps:
    - uses: actions/checkout@v2

    - name: Install Additional packages
      run: sudo apt-get install libhunspell-dev libmagick++-6.q16-dev graphviz libluajit-5.1-dev doxygen

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -- -j 6

    - name: Generate Documentation
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: make docs && make dark-docs

    - name: Move Dark Docs into Proper Location
      working-directory: ${{runner.workspace}}/unified/Documentation
      shell: bash
      run: mv dark light/

    - name: Pack the Binaries
      working-directory: ${{runner.workspace}}/unified/Binaries
      run: cmake -E tar cfv ../${{ matrix.config.binaries }} --format=zip .

    - name: Pack the Scripts
      working-directory: ${{runner.workspace}}/unified
      shell: bash
      run: zip -j ./${{ matrix.config.scripts }} `find . -name "*.nss" | grep -Pv '_t+[0-9]{0,1}.nss'`

    - name: Upload Binaries
      uses: actions/upload-artifact@v1
      with:
       path: ./${{ matrix.config.binaries }}
       name: ${{ matrix.config.binaries }}

    - name: Upload Scripts
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.scripts }}
        name: ${{ matrix.config.scripts }}

    - name: Deploy Documents to Github Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       BRANCH: gh-pages
       FOLDER: Documentation/light
       CLEAN: true

    - name: Deploy Prerelease
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: "Development Build"
        files: |
           ./${{ matrix.config.binaries }}
           ./${{ matrix.config.scripts }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu GCC 7",
            binaries: "NWNX-EE.zip",
            scripts: "NWScript.zip",
            os: ubuntu-20.04
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.binaries }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.binaries }}
        asset_name: ${{ matrix.config.binaries }}
        asset_content_type: application/x-gtar
